SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    1

************ OBJECT LISTING ************

FILE NAME: A:\_Austuasch\niko_usb\WiFi\Casio\WiFi\Net.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Net.c     1    #include "Net.h"
           Net.c     2    #include "stdio.h"
           Net.c     3    
           Net.c     4    Network network = {false, NULL, 0};
           Net.c     5    
           Net.c     6    void getNetworkInfo() {
P   00000000              _getNetworkInfo:                 ; function: getNetworkInfo
                                                           ; frame size=32
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
    0000000A 2F96                   MOV.L       R9,@-R15
    0000000C 2F86                   MOV.L       R8,@-R15
    0000000E 4F22                   STS.L       PR,@-R15
           Net.c     7        unsigned int key;
           Net.c     8        int numChars;
           Net.c     9        int lastTabIndex;
           Net.c    10    
           Net.c    11        Serial_BufferedTransmitOneByte((unsigned char) 110);
    00000010 D322                   MOV.L       L374+2,R3  ; _Serial_BufferedTransmitOneByte
    00000012 430B                   JSR         @R3
    00000014 E46E                   MOV         #110,R4
           Net.c    12    
           Net.c    13        serialReadString();
    00000016 D222                   MOV.L       L374+6,R2  ; _serialReadString
    00000018 420B                   JSR         @R2
    0000001A 0009                   NOP
           Net.c    14    
           Net.c    15        if (buf[0] == 0) {
    0000001C DC21                   MOV.L       L374+10,R12; _buf
    0000001E DD22                   MOV.L       L374+14,R13; _network
    00000020 63C0                   MOV.B       @R12,R3
    00000022 2338                   TST         R3,R3
    00000024 8F06                   BF/S        L343
    00000026 EB00                   MOV         #0,R11
           Net.c    16            network.isConnected = false;
    00000028 2DB2                   MOV.L       R11,@R13
           Net.c    17            free(network.ssid);
    0000002A D320                   MOV.L       L374+18,R3 ; _free
    0000002C 430B                   JSR         @R3
    0000002E 54D1                   MOV.L       @(4,R13),R4
           Net.c    18            network.rssi = 0;
           Net.c    19    
           Net.c    20            return;
    00000030 A02A                   BRA         L344
    00000032 1DB2                   MOV.L       R11,@(8,R13)
    00000034              L343:                             
           Net.c    21        }
           Net.c    22    
           Net.c    23        for (numChars = 0, lastTabIndex = 0; buf[numChars] != 0; numChars = numChars + 1) {
    00000034 D81E                   MOV.L       L374+22,R8 ; _memset
    00000036 6EB3                   MOV         R11,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000038 D91E                   MOV.L       L374+26,R9 ; _malloc
    0000003A A015                   BRA         L345
    0000003C 6AB3                   MOV         R11,R10
    0000003E              L346:                             
    0000003E 6BE3                   MOV         R14,R11
    00000040 60E3                   MOV         R14,R0
    00000042 03CC                   MOV.B       @(R0,R12),R3
    00000044 603C                   EXTU.B      R3,R0
    00000046 8809                   CMP/EQ      #9,R0
    00000048 8F0D                   BF/S        L347
    0000004A 7B01                   ADD         #1,R11
           Net.c    24            if (buf[numChars] == '\t') {
           Net.c    25                network.ssid = (unsigned char*) malloc(numChars + 1);
    0000004C 490B                   JSR         @R9
    0000004E 64B3                   MOV         R11,R4
    00000050 1D01                   MOV.L       R0,@(4,R13)
           Net.c    26                memset(network.ssid, 0, numChars + 1);
    00000052 66B3                   MOV         R11,R6
    00000054 E500                   MOV         #0,R5
    00000056 480B                   JSR         @R8
    00000058 6403                   MOV         R0,R4
           Net.c    27                memcpy(network.ssid, buf, numChars);
    0000005A 66E3                   MOV         R14,R6
    0000005C D216                   MOV.L       L374+30,R2 ; _memcpy
    0000005E 65C3                   MOV         R12,R5
    00000060 420B                   JSR         @R2
    00000062 54D1                   MOV.L       @(4,R13),R4
           Net.c    28    
           Net.c    29                lastTabIndex = numChars;
    00000064 6AE3                   MOV         R14,R10
    00000066              L347:                             
    00000066 6EB3                   MOV         R11,R14
    00000068              L345:                             
    00000068 60E3                   MOV         R14,R0
    0000006A 03CC                   MOV.B       @(R0,R12),R3
    0000006C 633C                   EXTU.B      R3,R3
    0000006E 2338                   TST         R3,R3
    00000070 8BE5                   BF          L346
           Net.c    30            }
           Net.c    31        }
           Net.c    32    
           Net.c    33        if (lastTabIndex < numChars - 1) {
    00000072 7EFF                   ADD         #-1,R14
    00000074 3AE3                   CMP/GE      R14,R10
    00000076 8905                   BT          L348
           Net.c    34            network.rssi = atoi(&buf[lastTabIndex + 1]);
    00000078 D310                   MOV.L       L374+34,R3 ; _atoi
    0000007A 64A3                   MOV         R10,R4
    0000007C 34CC                   ADD         R12,R4
    0000007E 430B                   JSR         @R3
    00000080 7401                   ADD         #1,R4
    00000082 1D02                   MOV.L       R0,@(8,R13)
    00000084              L348:                             
           Net.c    35        }
           Net.c    36    
           Net.c    37        network.isConnected = true;
    00000084 E201                   MOV         #1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000086 2D22                   MOV.L       R2,@R13
           Net.c    38    }
    00000088              L344:                             
    00000088 4F26                   LDS.L       @R15+,PR
    0000008A 68F6                   MOV.L       @R15+,R8
    0000008C 69F6                   MOV.L       @R15+,R9
    0000008E 6AF6                   MOV.L       @R15+,R10
    00000090 6BF6                   MOV.L       @R15+,R11
    00000092 6CF6                   MOV.L       @R15+,R12
    00000094 6DF6                   MOV.L       @R15+,R13
    00000096 000B                   RTS
    00000098 6EF6                   MOV.L       @R15+,R14
    0000009A              L374:                             
    0000009A 0000                   .DATA.W     0
    0000009C <00000000>             .DATA.L     _Serial_BufferedTransmitOneByte
    000000A0 <00000000>             .DATA.L     _serialReadString
    000000A4 <00000000>             .DATA.L     _buf
    000000A8 <00000000>             .DATA.L     _network
    000000AC <00000000>             .DATA.L     _free
    000000B0 <00000000>             .DATA.L     _memset
    000000B4 <00000000>             .DATA.L     _malloc
    000000B8 <00000000>             .DATA.L     _memcpy
    000000BC <00000000>             .DATA.L     _atoi
           Net.c    39    
           Net.c    40    void connectToNetwork() {
    000000C0              _connectToNetwork:               ; function: connectToNetwork
                                                           ; frame size=84
                                                           ; used runtime library name:
                                                           ; __modls
    000000C0 2FE6                   MOV.L       R14,@-R15
    000000C2 2FD6                   MOV.L       R13,@-R15
    000000C4 2FC6                   MOV.L       R12,@-R15
           Net.c    41        unsigned int key;
           Net.c    42        int counter = 0, lines = 0, lineBegin = 0, selection = 0, scroll = 0, lastTicks, a = 0, numChars = 0;
    000000C6 ED00                   MOV         #0,R13
           Net.c    43        unsigned char text[22];
           Net.c    44    
           Net.c    45        Serial_ClearReceiveBuffer();
    000000C8 D330                   MOV.L       L375+4,R3  ; _Serial_ClearReceiveBuffer
    000000CA 6ED3                   MOV         R13,R14
    000000CC 2FB6                   MOV.L       R11,@-R15
    000000CE 6CD3                   MOV         R13,R12
    000000D0 2FA6                   MOV.L       R10,@-R15
    000000D2 2F96                   MOV.L       R9,@-R15
    000000D4 2F86                   MOV.L       R8,@-R15
    000000D6 4F22                   STS.L       PR,@-R15
    000000D8 7FD4                   ADD         #-44,R15
    000000DA 430B                   JSR         @R3
    000000DC 2FD2                   MOV.L       R13,@R15
           Net.c    46    
           Net.c    47      
           Net.c    48        
           Net.c    49        lastTicks = RTC_GetTicks();
    000000DE D22C                   MOV.L       L375+8,R2  ; _RTC_GetTicks
    000000E0 420B                   JSR         @R2
    000000E2 0009                   NOP
    000000E4 1F03                   MOV.L       R0,@(12,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Net.c    50        counter = 0;
    000000E6 6BC3                   MOV         R12,R11
    000000E8 D82A                   MOV.L       L375+12,R8 ; _Print
    000000EA DA2B                   MOV.L       L375+16,R10; _buf
           Net.c    51    
           Net.c    52        while(1) {
    000000EC              L350:                             
           Net.c    53            if (RTC_Elapsed_ms(lastTicks, 250) || counter == 0) {
    000000EC 954C                   MOV.W       L375,R5    ; H'00FA
    000000EE D32B                   MOV.L       L375+20,R3 ; _RTC_Elapsed_ms
    000000F0 430B                   JSR         @R3
    000000F2 54F3                   MOV.L       @(12,R15),R4
    000000F4 2008                   TST         R0,R0
    000000F6 8B01                   BF          L352
    000000F8 2BB8                   TST         R11,R11
    000000FA 8B25                   BF          L351
    000000FC              L352:                             
           Net.c    54                counter = counter + 1;
           Net.c    55                counter = (counter - 1) % 5 + 1;
    000000FC D328                   MOV.L       L375+24,R3 ; __modls
    000000FE 7B01                   ADD         #1,R11
    00000100 61B3                   MOV         R11,R1
    00000102 71FF                   ADD         #-1,R1
    00000104 430B                   JSR         @R3
    00000106 E005                   MOV         #5,R0
           Net.c    56                lastTicks = RTC_GetTicks();
    00000108 D221                   MOV.L       L375+8,R2  ; _RTC_GetTicks
    0000010A 6B03                   MOV         R0,R11
    0000010C 420B                   JSR         @R2
    0000010E 7B01                   ADD         #1,R11
           Net.c    57    
           Net.c    58                Bdisp_AllClr_DDVRAM();
    00000110 D324                   MOV.L       L375+28,R3 ; _Bdisp_AllClr_DDVRAM
    00000112 430B                   JSR         @R3
    00000114 1F03                   MOV.L       R0,@(12,R15)
           Net.c    59                locate(1, 1);
    00000116 E501                   MOV         #1,R5
    00000118 D223                   MOV.L       L375+32,R2 ; _locate
    0000011A 420B                   JSR         @R2
    0000011C 6453                   MOV         R5,R4
           Net.c    60                Print((unsigned char*) "Scanning");
    0000011E D423                   MOV.L       L375+36,R4 ; L312
    00000120 480B                   JSR         @R8
    00000122 0009                   NOP
           Net.c    61                for (a = 0; a < counter; a = a + 1) {
    00000124 4B15                   CMP/PL      R11
    00000126 8F0C                   BF/S        L353
    00000128 69D3                   MOV         R13,R9
    0000012A              L354:                             
           Net.c    62                    locate(a + 1, 2);
    0000012A E502                   MOV         #2,R5
    0000012C D31E                   MOV.L       L375+32,R3 ; _locate
    0000012E 6493                   MOV         R9,R4
    00000130 7401                   ADD         #1,R4
    00000132 430B                   JSR         @R3
    00000134 1F42                   MOV.L       R4,@(8,R15)
           Net.c    63                    Print((unsigned char*) ".");




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000136 D41E                   MOV.L       L375+40,R4 ; L314
    00000138 480B                   JSR         @R8
    0000013A 0009                   NOP
    0000013C 59F2                   MOV.L       @(8,R15),R9
    0000013E 39B3                   CMP/GE      R11,R9
    00000140 8BF3                   BF          L354
    00000142              L353:                             
           Net.c    64                }
           Net.c    65                Bdisp_PutDisp_DD();
    00000142 D21C                   MOV.L       L375+44,R2 ; _Bdisp_PutDisp_DD
    00000144 420B                   JSR         @R2
    00000146 0009                   NOP
    00000148              L351:                             
           Net.c    66            }
           Net.c    67    
           Net.c    68            if (Serial_GetReceivedBytesAvailable() > 0) {
    00000148 D31B                   MOV.L       L375+48,R3 ; _Serial_GetReceivedBytesAvailable
    0000014A 430B                   JSR         @R3
    0000014C 0009                   NOP
    0000014E 4015                   CMP/PL      R0
    00000150 8BCC                   BF          L350
           Net.c    69                unsigned char c;
           Net.c    70                Serial_ReadOneByte(&c);
    00000152 64F3                   MOV         R15,R4
    00000154 D319                   MOV.L       L375+52,R3 ; _Serial_ReadOneByte
    00000156 430B                   JSR         @R3
    00000158 7410                   ADD         #16,R4
           Net.c    71    
           Net.c    72                if (c == 0) {
    0000015A E010                   MOV         #16,R0
    0000015C 02FC                   MOV.B       @(R0,R15),R2
    0000015E 2228                   TST         R2,R2
    00000160 8908                   BT          L359
           Net.c    73                    break;
           Net.c    74                } else {
           Net.c    75                    buf[numChars] = c;
    00000162 61F3                   MOV         R15,R1
    00000164 60F2                   MOV.L       @R15,R0
    00000166 7110                   ADD         #16,R1
    00000168 6310                   MOV.B       @R1,R3
    0000016A 0A34                   MOV.B       R3,@(R0,R10)
           Net.c    76                    numChars = numChars + 1;
    0000016C 62F2                   MOV.L       @R15,R2
    0000016E 7201                   ADD         #1,R2
    00000170 AFBC                   BRA         L350
    00000172 2F22                   MOV.L       R2,@R15
    00000174              L359:                             
           Net.c    77                }
           Net.c    78            }
           Net.c    79        }
           Net.c    80    
           Net.c    81        do {
           Net.c    82            Bdisp_AllClr_DDVRAM();
    00000174 D30B                   MOV.L       L375+28,R3 ; _Bdisp_AllClr_DDVRAM
    00000176 430B                   JSR         @R3
    00000178 0009                   NOP
           Net.c    83    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           Net.c    84            for (counter = 0, lines = 0, lineBegin = 0; buf[counter] != 0; counter = counter + 1) {
    0000017A 69D3                   MOV         R13,R9
    0000017C 2FD2                   MOV.L       R13,@R15
    0000017E 63C3                   MOV         R12,R3
    00000180 6BD3                   MOV         R13,R11
    00000182 7308                   ADD         #8,R3
    00000184 A044                   BRA         L360
    00000186 1F33                   MOV.L       R3,@(12,R15)
    00000188              L375:                             
    00000188 00FA                   .DATA.W     H'00FA
    0000018A 0000                   .DATA.W     0
    0000018C <00000000>             .DATA.L     _Serial_ClearReceiveBuffer
    00000190 <00000000>             .DATA.L     _RTC_GetTicks
    00000194 <00000000>             .DATA.L     _Print
    00000198 <00000000>             .DATA.L     _buf
    0000019C <00000000>             .DATA.L     _RTC_Elapsed_ms
    000001A0 <00000000>             .DATA.L     __modls
    000001A4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000001A8 <00000000>             .DATA.L     _locate
    000001AC <00000000>             .DATA.L     L312
    000001B0 <00000000>             .DATA.L     L314
    000001B4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000001B8 <00000000>             .DATA.L     _Serial_GetReceivedBytesAvailable
    000001BC <00000000>             .DATA.L     _Serial_ReadOneByte
    000001C0              L361:                             
    000001C0 6393                   MOV         R9,R3
    000001C2 7301                   ADD         #1,R3
    000001C4 1F32                   MOV.L       R3,@(8,R15)
    000001C6 6093                   MOV         R9,R0
    000001C8 02AC                   MOV.B       @(R0,R10),R2
    000001CA 602C                   EXTU.B      R2,R0
    000001CC 880A                   CMP/EQ      #10,R0
    000001CE 8B1E                   BF          L362
           Net.c    85                if (buf[counter] == '\n') {
           Net.c    86                    lines = lines + 1;
    000001D0 7B01                   ADD         #1,R11
           Net.c    87    
           Net.c    88                    if (lines > scroll && lines <= scroll + 8) {
    000001D2 3BC7                   CMP/GT      R12,R11
    000001D4 8B19                   BF          L363
    000001D6 52F3                   MOV.L       @(12,R15),R2
    000001D8 3B27                   CMP/GT      R2,R11
    000001DA 8916                   BT          L363
           Net.c    89                        memset(text, 0, sizeof text);
    000001DC D323                   MOV.L       L376+4,R3  ; _memset
    000001DE E616                   MOV         #22,R6
    000001E0 E500                   MOV         #0,R5
    000001E2 64F3                   MOV         R15,R4
    000001E4 430B                   JSR         @R3
    000001E6 7414                   ADD         #20,R4
           Net.c    90                        memcpy(text, &buf[lineBegin], counter - lineBegin);
    000001E8 63F2                   MOV.L       @R15,R3
    000001EA 6693                   MOV         R9,R6
    000001EC D220                   MOV.L       L376+8,R2  ; _memcpy
    000001EE 64F3                   MOV         R15,R4
    000001F0 3638                   SUB         R3,R6
    000001F2 6533                   MOV         R3,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001F4 35AC                   ADD         R10,R5
    000001F6 420B                   JSR         @R2
    000001F8 7414                   ADD         #20,R4
           Net.c    91    
           Net.c    92                        locate(1, lines - scroll);
    000001FA 65B3                   MOV         R11,R5
    000001FC D31D                   MOV.L       L376+12,R3 ; _locate
    000001FE 35C8                   SUB         R12,R5
    00000200 430B                   JSR         @R3
    00000202 E401                   MOV         #1,R4
           Net.c    93                        Print(text);
    00000204 64F3                   MOV         R15,R4
    00000206 480B                   JSR         @R8
    00000208 7414                   ADD         #20,R4
    0000020A              L363:                             
           Net.c    94                    }
           Net.c    95    
           Net.c    96                    lineBegin = counter + 1;
    0000020A 52F2                   MOV.L       @(8,R15),R2
    0000020C 2F22                   MOV.L       R2,@R15
    0000020E              L362:                             
    0000020E 59F2                   MOV.L       @(8,R15),R9
    00000210              L360:                             
    00000210 6093                   MOV         R9,R0
    00000212 03AC                   MOV.B       @(R0,R10),R3
    00000214 633C                   EXTU.B      R3,R3
    00000216 2338                   TST         R3,R3
    00000218 8BD2                   BF          L361
           Net.c    97                }
           Net.c    98            }
           Net.c    99    
           Net.c   100            Bdisp_AreaReverseVRAM(0, 8 * (selection - scroll), 127, 8 * (selection - scroll) + 7);
    0000021A 69E3                   MOV         R14,R9
    0000021C D316                   MOV.L       L376+16,R3 ; _Bdisp_AreaReverseVRAM
    0000021E E67F                   MOV         #127,R6
    00000220 39C8                   SUB         R12,R9
    00000222 4908                   SHLL2       R9
    00000224 4900                   SHLL        R9
    00000226 6793                   MOV         R9,R7
    00000228 7707                   ADD         #7,R7
    0000022A 6593                   MOV         R9,R5
    0000022C 430B                   JSR         @R3
    0000022E E400                   MOV         #0,R4
           Net.c   101    
           Net.c   102            GetKey(&key);
    00000230 D212                   MOV.L       L376+20,R2 ; _GetKey
    00000232 64F3                   MOV         R15,R4
    00000234 420B                   JSR         @R2
    00000236 7404                   ADD         #4,R4
           Net.c   103    
           Net.c   104            if (key == 30018) {
    00000238 9316                   MOV.W       L376,R3    ; H'7542
    0000023A 52F1                   MOV.L       @(4,R15),R2
    0000023C 3230                   CMP/EQ      R3,R2
    0000023E 8B01                   BF          L364
           Net.c   105                selection = selection - 1;
    00000240 A005                   BRA         L365




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000242 7EFF                   ADD         #-1,R14
    00000244              L364:                             
           Net.c   106            } else if (key == 30023) {
    00000244 9111                   MOV.W       L376+2,R1  ; H'7547
    00000246 52F1                   MOV.L       @(4,R15),R2
    00000248 3210                   CMP/EQ      R1,R2
    0000024A 8B00                   BF          L365
           Net.c   107                selection = selection + 1;
    0000024C 7E01                   ADD         #1,R14
    0000024E              L365:                             
           Net.c   108            }
           Net.c   109    
           Net.c   110            if (selection < 0) {
    0000024E 4E11                   CMP/PZ      R14
    00000250 8901                   BT          L367
           Net.c   111                selection = 0;
    00000252 A019                   BRA         L368
    00000254 6ED3                   MOV         R13,R14
    00000256              L367:                             
           Net.c   112            } else if (selection >= lines) {
    00000256 3EB3                   CMP/GE      R11,R14
    00000258 8B02                   BF          L369
           Net.c   113                selection = lines - 1;
    0000025A 6EB3                   MOV         R11,R14
    0000025C A014                   BRA         L368
    0000025E 7EFF                   ADD         #-1,R14
    00000260              L369:                             
           Net.c   114            } else {
           Net.c   115                if (selection < scroll) {
    00000260 3EC3                   CMP/GE      R12,R14
    00000262 890D                   BT          L371
           Net.c   116                    scroll = scroll - 1;
    00000264 A010                   BRA         L368
    00000266 7CFF                   ADD         #-1,R12
    00000268              L376:                             
    00000268 7542                   .DATA.W     H'7542
    0000026A 7547                   .DATA.W     H'7547
    0000026C <00000000>             .DATA.L     _memset
    00000270 <00000000>             .DATA.L     _memcpy
    00000274 <00000000>             .DATA.L     _locate
    00000278 <00000000>             .DATA.L     _Bdisp_AreaReverseVRAM
    0000027C <00000000>             .DATA.L     _GetKey
    00000280              L371:                             
           Net.c   117                } else if (selection >= 8 + scroll) {
    00000280 53F3                   MOV.L       @(12,R15),R3
    00000282 3E33                   CMP/GE      R3,R14
    00000284 8B00                   BF          L368
           Net.c   118                    scroll = scroll + 1;
    00000286 7C01                   ADD         #1,R12
    00000288              L368:                             
           Net.c   119                }
           Net.c   120            }
           Net.c   121        } while(key != 30004);
    00000288 9330                   MOV.W       L377,R3    ; H'7534
    0000028A 52F1                   MOV.L       @(4,R15),R2
    0000028C 3230                   CMP/EQ      R3,R2
    0000028E 8901                   BT          L378




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000290 AF70                   BRA         L359
    00000292 0009                   NOP
    00000294              L378:                             
           Net.c   122            
           Net.c   123            Bdisp_AllClr_DDVRAM();
    00000294 D316                   MOV.L       L377+4,R3  ; _Bdisp_AllClr_DDVRAM
    00000296 430B                   JSR         @R3
    00000298 0009                   NOP
           Net.c   124    
           Net.c   125            memset(buf, 0, sizeof buf);
    0000029A E500                   MOV         #0,R5
    0000029C D215                   MOV.L       L377+8,R2  ; _memset
    0000029E 9626                   MOV.W       L377+2,R6  ; H'03E8
    000002A0 420B                   JSR         @R2
    000002A2 64A3                   MOV         R10,R4
           Net.c   126        sprintf(buf, "%d", selection);      
    000002A4 2FE6                   MOV.L       R14,@-R15
    000002A6 D314                   MOV.L       L377+12,R3 ; L335
    000002A8 D214                   MOV.L       L377+16,R2 ; _sprintf
    000002AA 2F36                   MOV.L       R3,@-R15
    000002AC 420B                   JSR         @R2
    000002AE 64A3                   MOV         R10,R4
           Net.c   127        serialSendString();
    000002B0 D313                   MOV.L       L377+20,R3 ; _serialSendString
    000002B2 430B                   JSR         @R3
    000002B4 0009                   NOP
           Net.c   128    
           Net.c   129        Bdisp_AllClr_DDVRAM();
    000002B6 D20E                   MOV.L       L377+4,R2  ; _Bdisp_AllClr_DDVRAM
    000002B8 420B                   JSR         @R2
    000002BA 0009                   NOP
           Net.c   130    
           Net.c   131        locate(1, 1);
    000002BC D311                   MOV.L       L377+24,R3 ; _locate
    000002BE E501                   MOV         #1,R5
    000002C0 430B                   JSR         @R3
    000002C2 6453                   MOV         R5,R4
           Net.c   132        Print((unsigned char*) "Password:");
    000002C4 D410                   MOV.L       L377+28,R4 ; L337
    000002C6 480B                   JSR         @R8
    000002C8 0009                   NOP
           Net.c   133    
           Net.c   134    //    readString(1, 3);
           Net.c   135    //    serialSendString();
           Net.c   136    
           Net.c   137            GetKey(&key);
    000002CA 64F3                   MOV         R15,R4
    000002CC D20F                   MOV.L       L377+32,R2 ; _GetKey
    000002CE 420B                   JSR         @R2
    000002D0 740C                   ADD         #12,R4
           Net.c   138    }
    000002D2 7F34                   ADD         #52,R15
    000002D4 4F26                   LDS.L       @R15+,PR
    000002D6 68F6                   MOV.L       @R15+,R8
    000002D8 69F6                   MOV.L       @R15+,R9
    000002DA 6AF6                   MOV.L       @R15+,R10
    000002DC 6BF6                   MOV.L       @R15+,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002DE 6CF6                   MOV.L       @R15+,R12
    000002E0 6DF6                   MOV.L       @R15+,R13
    000002E2 000B                   RTS
    000002E4 6EF6                   MOV.L       @R15+,R14
           Net.c   139    
           Net.c   140    void disconnect() {
    000002E6              _disconnect:                     ; function: disconnect
                                                           ; frame size=0
           Net.c   141        Serial_BufferedTransmitOneByte((unsigned char) 114);
    000002E6 D30A                   MOV.L       L377+36,R3 ; _Serial_BufferedTransmitOneByte
    000002E8 432B                   JMP         @R3
    000002EA E472                   MOV         #114,R4
    000002EC              L377:                             
    000002EC 7534                   .DATA.W     H'7534
    000002EE 03E8                   .DATA.W     H'03E8
    000002F0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000002F4 <00000000>             .DATA.L     _memset
    000002F8 <00000000>             .DATA.L     L335
    000002FC <00000000>             .DATA.L     _sprintf
    00000300 <00000000>             .DATA.L     _serialSendString
    00000304 <00000000>             .DATA.L     _locate
    00000308 <00000000>             .DATA.L     L337
    0000030C <00000000>             .DATA.L     _GetKey
    00000310 <00000000>             .DATA.L     _Serial_BufferedTransmitOneByte
           Net.c   142    }
D   00000000              _network:                        ; static: network
    00000000 00000000               .DATA.L     H'00000000
    00000004 00000000               .DATA.L     H'00000000
    00000008 00000000               .DATA.L     H'00000000
C   00000000              L312:
    00000000 5363616E6E             .SDATA      "Scanning"
             696E67       
    00000008 00                     .DATA.B     H'00
    00000009 00000001               .RES.B      1
    0000000A 00000002               .RES.W      1
    0000000C              L314:
    0000000C 2E                     .SDATA      "."
    0000000D 00                     .DATA.B     H'00
    0000000E 00000002               .RES.W      1
    00000010              L335:
    00000010 2564                   .SDATA      "%d"
    00000012 00                     .DATA.B     H'00
    00000013 00000001               .RES.B      1
    00000014              L337:
    00000014 5061737377             .SDATA      "Password:"
             6F72643A     
    0000001D 00                     .DATA.B     H'00














SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 12-May-2018 19:22:33  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         1




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      142



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000314 Byte(s)
CONSTANT SECTION (C):                               0000001E Byte(s)
DATA     SECTION (D):                               0000000C Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 0000033E Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           22
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           4
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            57






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Max\AppData\Local\Temp\hmkDB22.tmp 

