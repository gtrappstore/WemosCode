SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\Documents\GTR\Wifi\DataTest\net.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c     1    #include "net.h"
           net.c     2    #include "stdio.h"
           net.c     3    
           net.c     4    void openSerial() {
P   00000000              _openSerial:                     ; function: openSerial
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
           net.c     5        unsigned char mode[6];
           net.c     6        mode[0] = 0;
    00000002 E400                   MOV         #0,R4
           net.c     7        mode[1] = 5;
           net.c     8        mode[2] = 0;
           net.c     9        mode[3] = 0;
           net.c    10        mode[4] = 0;
           net.c    11        mode[5] = 0;
           net.c    12    
           net.c    13        Serial_Open(mode);
    00000004 D346                   MOV.L       L599+6,R3  ; _Serial_Open
    00000006 E005                   MOV         #5,R0
    00000008 4F22                   STS.L       PR,@-R15
    0000000A 7FF8                   ADD         #-8,R15
    0000000C 6EF3                   MOV         R15,R14
    0000000E 2E40                   MOV.B       R4,@R14
    00000010 80E1                   MOV.B       R0,@(1,R14)
    00000012 6043                   MOV         R4,R0
    00000014 80E2                   MOV.B       R0,@(2,R14)
    00000016 80E3                   MOV.B       R0,@(3,R14)
    00000018 80E4                   MOV.B       R0,@(4,R14)
    0000001A 80E5                   MOV.B       R0,@(5,R14)
    0000001C 430B                   JSR         @R3
    0000001E 64E3                   MOV         R14,R4
           net.c    14    }
    00000020 7F08                   ADD         #8,R15
    00000022 4F26                   LDS.L       @R15+,PR
    00000024 000B                   RTS
    00000026 6EF6                   MOV.L       @R15+,R14
           net.c    15    
           net.c    16    void closeSerial() {
    00000028              _closeSerial:                    ; function: closeSerial
                                                           ; frame size=0
           net.c    17            Serial_Close(1);
    00000028 D33E                   MOV.L       L599+10,R3 ; _Serial_Close
    0000002A 432B                   JMP         @R3
    0000002C E401                   MOV         #1,R4
           net.c    18    }
           net.c    19    
           net.c    20    void sendCommand(unsigned char* command) {
    0000002E              _sendCommand:                    ; function: sendCommand
                                                           ; frame size=8
    0000002E 4F22                   STS.L       PR,@-R15
    00000030 2F46                   MOV.L       R4,@-R15
           net.c    21            Serial_BufferedTransmitOneByte((unsigned char) 219);
    00000032 9472                   MOV.W       L599,R4    ; H'00DB
    00000034 D33C                   MOV.L       L599+14,R3 ; _Serial_BufferedTransmitOneByte




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000036 430B                   JSR         @R3
    00000038 0009                   NOP
           net.c    22            Serial_BufferedTransmitNBytes(command, strlen(command) + 1);
    0000003A D33C                   MOV.L       L599+18,R3 ; _strlen
    0000003C 430B                   JSR         @R3
    0000003E 64F2                   MOV.L       @R15,R4
    00000040 64F2                   MOV.L       @R15,R4
    00000042 6503                   MOV         R0,R5
    00000044 D33A                   MOV.L       L599+22,R3 ; _Serial_BufferedTransmitNBytes
    00000046 7F04                   ADD         #4,R15
    00000048 7501                   ADD         #1,R5
    0000004A 432B                   JMP         @R3
    0000004C 4F26                   LDS.L       @R15+,PR
           net.c    23    }
           net.c    24    
           net.c    25    void sendStatus(unsigned char* status) {
    0000004E              _sendStatus:                     ; function: sendStatus
                                                           ; frame size=8
    0000004E 4F22                   STS.L       PR,@-R15
    00000050 2F46                   MOV.L       R4,@-R15
           net.c    26            Serial_BufferedTransmitOneByte((unsigned char) 220);
    00000052 9463                   MOV.W       L599+2,R4  ; H'00DC
    00000054 D334                   MOV.L       L599+14,R3 ; _Serial_BufferedTransmitOneByte
    00000056 430B                   JSR         @R3
    00000058 0009                   NOP
           net.c    27            Serial_BufferedTransmitNBytes(status, strlen(status) + 1);
    0000005A D334                   MOV.L       L599+18,R3 ; _strlen
    0000005C 430B                   JSR         @R3
    0000005E 64F2                   MOV.L       @R15,R4
    00000060 64F2                   MOV.L       @R15,R4
    00000062 6503                   MOV         R0,R5
    00000064 D332                   MOV.L       L599+22,R3 ; _Serial_BufferedTransmitNBytes
    00000066 7F04                   ADD         #4,R15
    00000068 7501                   ADD         #1,R5
    0000006A 432B                   JMP         @R3
    0000006C 4F26                   LDS.L       @R15+,PR
           net.c    28    }
           net.c    29    
           net.c    30    int receiveString(unsigned char* buf, int maxLen) {
    0000006E              _receiveString:                  ; function: receiveString
                                                           ; frame size=0
           net.c    31            return receiveStringTimeout(buf, maxLen, 500);
    0000006E 9656                   MOV.W       L599+4,R6  ; H'01F4
    00000070 A000                   BRA         _receiveStringTimeout
    00000072 0009                   NOP
           net.c    32    }
           net.c    33    
           net.c    34    int receiveStringTimeout(unsigned char* buf, int maxLen, int timeout) { // Bei true ist nicht getimeouted
    00000074              _receiveStringTimeout:           ; function: receiveStringTimeout
                                                           ; frame size=44
    00000074 2FE6                   MOV.L       R14,@-R15
    00000076 2FD6                   MOV.L       R13,@-R15
    00000078 2FC6                   MOV.L       R12,@-R15
    0000007A 2FB6                   MOV.L       R11,@-R15
    0000007C 2FA6                   MOV.L       R10,@-R15
    0000007E 2F96                   MOV.L       R9,@-R15
    00000080 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000082 6943                   MOV         R4,R9
           net.c    35            int startTicks = RTC_GetTicks();
    00000084 D32B                   MOV.L       L599+26,R3 ; _RTC_GetTicks
    00000086 4F22                   STS.L       PR,@-R15
    00000088 7FF4                   ADD         #-12,R15
    0000008A 1F52                   MOV.L       R5,@(8,R15)
    0000008C 430B                   JSR         @R3
    0000008E 1F61                   MOV.L       R6,@(4,R15)
    00000090 DB29                   MOV.L       L599+30,R11; _RTC_Elapsed_ms
    00000092 EE01                   MOV         #1,R14
    00000094 5AF2                   MOV.L       @(8,R15),R10
    00000096 6803                   MOV         R0,R8
           net.c    36            int numChars = 0;
    00000098 ED00                   MOV         #0,R13
           net.c    37            int ret = 0;
    0000009A 6CD3                   MOV         R13,R12
           net.c    38            
           net.c    39            while (!RTC_Elapsed_ms(startTicks, timeout)) {
    0000009C A013                   BRA         L516
    0000009E 7AFF                   ADD         #-1,R10
    000000A0              L517:                             
           net.c    40                    if (Serial_GetReceivedBytesAvailable() >= 1) {
    000000A0 D226                   MOV.L       L599+34,R2 ; _Serial_GetReceivedBytesAvailable
    000000A2 420B                   JSR         @R2
    000000A4 0009                   NOP
    000000A6 30E3                   CMP/GE      R14,R0
    000000A8 8B0D                   BF          L516
           net.c    41                            unsigned char c;
           net.c    42                            Serial_ReadOneByte(&c);
    000000AA D225                   MOV.L       L599+38,R2 ; _Serial_ReadOneByte
    000000AC 420B                   JSR         @R2
    000000AE 64F3                   MOV         R15,R4
           net.c    43                            
           net.c    44                            if (c == 0 || numChars >= maxLen - 1) {
    000000B0 63F0                   MOV.B       @R15,R3
    000000B2 2338                   TST         R3,R3
    000000B4 8901                   BT          L520
    000000B6 3DA3                   CMP/GE      R10,R13
    000000B8 8B01                   BF          L519
    000000BA              L520:                             
           net.c    45                                    ret = 1;
           net.c    46                                    break;
    000000BA A009                   BRA         L521
    000000BC 6CE3                   MOV         R14,R12
    000000BE              L519:                             
           net.c    47                            }
           net.c    48                            
           net.c    49                            buf[numChars++] = c;
    000000BE 60D3                   MOV         R13,R0
    000000C0 63F0                   MOV.B       @R15,R3
    000000C2 7D01                   ADD         #1,R13
    000000C4 0934                   MOV.B       R3,@(R0,R9)
    000000C6              L516:                             
    000000C6 55F1                   MOV.L       @(4,R15),R5
    000000C8 4B0B                   JSR         @R11
    000000CA 6483                   MOV         R8,R4
    000000CC 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000CE 89E7                   BT          L517
    000000D0              L521:                             
           net.c    50                    }
           net.c    51            }
           net.c    52            
           net.c    53            buf[numChars] = 0;
    000000D0 60D3                   MOV         R13,R0
    000000D2 E300                   MOV         #0,R3
    000000D4 0934                   MOV.B       R3,@(R0,R9)
           net.c    54            return ret;
    000000D6 60C3                   MOV         R12,R0
           net.c    55    }
    000000D8 7F0C                   ADD         #12,R15
    000000DA 4F26                   LDS.L       @R15+,PR
    000000DC 68F6                   MOV.L       @R15+,R8
    000000DE 69F6                   MOV.L       @R15+,R9
    000000E0 6AF6                   MOV.L       @R15+,R10
    000000E2 6BF6                   MOV.L       @R15+,R11
    000000E4 6CF6                   MOV.L       @R15+,R12
    000000E6 6DF6                   MOV.L       @R15+,R13
    000000E8 000B                   RTS
    000000EA 6EF6                   MOV.L       @R15+,R14
           net.c    56    
           net.c    57    int receiveStatus() {
    000000EC              _receiveStatus:                  ; function: receiveStatus
                                                           ; frame size=0
           net.c    58            return receiveStatusTimeout(500);
    000000EC 9417                   MOV.W       L599+4,R4  ; H'01F4
    000000EE A000                   BRA         _receiveStatusTimeout
    000000F0 0009                   NOP
           net.c    59    }
           net.c    60    
           net.c    61    int receiveStatusTimeout(int timeout) {
    000000F2              _receiveStatusTimeout:           ; function: receiveStatusTimeout
                                                           ; frame size=48
    000000F2 2FE6                   MOV.L       R14,@-R15
    000000F4 2FD6                   MOV.L       R13,@-R15
    000000F6 2FC6                   MOV.L       R12,@-R15
    000000F8 2FB6                   MOV.L       R11,@-R15
    000000FA 2FA6                   MOV.L       R10,@-R15
    000000FC 2F96                   MOV.L       R9,@-R15
    000000FE 2F86                   MOV.L       R8,@-R15
    00000100 4F22                   STS.L       PR,@-R15
    00000102 7FF0                   ADD         #-16,R15
           net.c    62            int startTicks = RTC_GetTicks();
    00000104 D30B                   MOV.L       L599+26,R3 ; _RTC_GetTicks
    00000106 430B                   JSR         @R3
    00000108 6D43                   MOV         R4,R13
    0000010A 6903                   MOV         R0,R9
    0000010C D80D                   MOV.L       L599+42,R8 ; _convertStatus
    0000010E EC01                   MOV         #1,R12
    00000110 DA0A                   MOV.L       L599+34,R10; _Serial_GetReceivedBytesAvailable
    00000112 6EF3                   MOV         R15,R14
    00000114 9B02                   MOV.W       L599+2,R11 ; H'00DC
           net.c    63            unsigned char statusBuf[11];
           net.c    64            
           net.c    65            while (!RTC_Elapsed_ms(startTicks, timeout)) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000116 A02A                   BRA         L524
    00000118 7E04                   ADD         #4,R14
    0000011A              L599:                             
    0000011A 00DB                   .DATA.W     H'00DB
    0000011C 00DC                   .DATA.W     H'00DC
    0000011E 01F4                   .DATA.W     H'01F4
    00000120 <00000000>             .DATA.L     _Serial_Open
    00000124 <00000000>             .DATA.L     _Serial_Close
    00000128 <00000000>             .DATA.L     _Serial_BufferedTransmitOneByte
    0000012C <00000000>             .DATA.L     _strlen
    00000130 <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    00000134 <00000000>             .DATA.L     _RTC_GetTicks
    00000138 <00000000>             .DATA.L     _RTC_Elapsed_ms
    0000013C <00000000>             .DATA.L     _Serial_GetReceivedBytesAvailable
    00000140 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000144 <00000000>             .DATA.L     _convertStatus
    00000148              L525:                             
           net.c    66                    if (Serial_GetReceivedBytesAvailable() >= 1) {
    00000148 4A0B                   JSR         @R10
    0000014A 0009                   NOP
    0000014C 30C3                   CMP/GE      R12,R0
    0000014E 8B0E                   BF          L524
           net.c    67                            unsigned char c;
           net.c    68                            Serial_ReadOneByte(&c);
    00000150 D22B                   MOV.L       L600+4,R2  ; _Serial_ReadOneByte
    00000152 420B                   JSR         @R2
    00000154 64F3                   MOV         R15,R4
           net.c    69                            
           net.c    70                            if (c == 220) {
    00000156 63F0                   MOV.B       @R15,R3
    00000158 633C                   EXTU.B      R3,R3
    0000015A 33B0                   CMP/EQ      R11,R3
    0000015C 8B07                   BF          L524
           net.c    71                                    receiveStringTimeout(statusBuf, 11, timeout);
    0000015E 66D3                   MOV         R13,R6
    00000160 E50B                   MOV         #11,R5
    00000162 BF87                   BSR         _receiveStringTimeout
    00000164 64E3                   MOV         R14,R4
           net.c    72                                    return convertStatus(statusBuf);
    00000166 480B                   JSR         @R8
    00000168 64E3                   MOV         R14,R4
    0000016A A007                   BRA         L528
    0000016C 0009                   NOP
    0000016E              L524:                             
    0000016E 65D3                   MOV         R13,R5
    00000170 D324                   MOV.L       L600+8,R3  ; _RTC_Elapsed_ms
    00000172 430B                   JSR         @R3
    00000174 6493                   MOV         R9,R4
    00000176 2008                   TST         R0,R0
    00000178 89E6                   BT          L525
           net.c    73                            }
           net.c    74                    }
           net.c    75            }
           net.c    76            
           net.c    77            return -1;
    0000017A E0FF                   MOV         #-1,R0
           net.c    78    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000017C              L528:                             
    0000017C 7F10                   ADD         #16,R15
    0000017E 4F26                   LDS.L       @R15+,PR
    00000180 68F6                   MOV.L       @R15+,R8
    00000182 69F6                   MOV.L       @R15+,R9
    00000184 6AF6                   MOV.L       @R15+,R10
    00000186 6BF6                   MOV.L       @R15+,R11
    00000188 6CF6                   MOV.L       @R15+,R12
    0000018A 6DF6                   MOV.L       @R15+,R13
    0000018C 000B                   RTS
    0000018E 6EF6                   MOV.L       @R15+,R14
           net.c    79    
           net.c    80    unsigned int calculateChecksum(unsigned char* buf, int len) {
    00000190              _calculateChecksum:              ; function: calculateChecksum
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __modlu
    00000190 2FE6                   MOV.L       R14,@-R15
           net.c    81            unsigned int checksum = 0;
    00000192 E600                   MOV         #0,R6
    00000194 4F22                   STS.L       PR,@-R15
    00000196 EE00                   MOV         #0,R14
    00000198 3E4C                   ADD         R4,R14
           net.c    82            int counter;
           net.c    83            
           net.c    84            for (counter = 0; counter < len; counter++) {
    0000019A 4515                   CMP/PL      R5
    0000019C 942E                   MOV.W       L600,R4    ; H'2710
    0000019E 8F0D                   BF/S        L529
    000001A0 6763                   MOV         R6,R7
    000001A2              L530:                             
           net.c    85                    checksum += buf[counter];
    000001A2 63E4                   MOV.B       @R14+,R3
    000001A4 633C                   EXTU.B      R3,R3
    000001A6 363C                   ADD         R3,R6
           net.c    86                    
           net.c    87                    if (checksum > 10000) {
    000001A8 3646                   CMP/HI      R4,R6
    000001AA 8B04                   BF          L531
           net.c    88                            checksum = checksum % 10000;
    000001AC D316                   MOV.L       L600+12,R3 ; __modlu
    000001AE 6163                   MOV         R6,R1
    000001B0 430B                   JSR         @R3
    000001B2 6043                   MOV         R4,R0
    000001B4 6603                   MOV         R0,R6
    000001B6              L531:                             
    000001B6 7701                   ADD         #1,R7
    000001B8 3753                   CMP/GE      R5,R7
    000001BA 8BF2                   BF          L530
    000001BC              L529:                             
           net.c    89                    }
           net.c    90            }
           net.c    91            
           net.c    92            return checksum;
           net.c    93    }
    000001BC 4F26                   LDS.L       @R15+,PR
    000001BE 6063                   MOV         R6,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001C0 000B                   RTS
    000001C2 6EF6                   MOV.L       @R15+,R14
           net.c    94    
           net.c    95    Data* receiveData(int retryCount) {
    000001C4              _receiveData:                    ; function: receiveData
                                                           ; frame size=4
    000001C4 7FFC                   ADD         #-4,R15
           net.c    96            return receiveDataTimeout(500, retryCount);
    000001C6 6543                   MOV         R4,R5
    000001C8 2F42                   MOV.L       R4,@R15
    000001CA 9418                   MOV.W       L600+2,R4  ; H'01F4
    000001CC A000                   BRA         _receiveDataTimeout
    000001CE 7F04                   ADD         #4,R15
           net.c    97    }
           net.c    98    
           net.c    99    Data* receiveDataTimeout(int timeout, int retryCount) {
    000001D0              _receiveDataTimeout:             ; function: receiveDataTimeout
                                                           ; frame size=60
    000001D0 2FE6                   MOV.L       R14,@-R15
    000001D2 2FD6                   MOV.L       R13,@-R15
    000001D4 2FC6                   MOV.L       R12,@-R15
    000001D6 2FB6                   MOV.L       R11,@-R15
    000001D8 2FA6                   MOV.L       R10,@-R15
    000001DA 6B43                   MOV         R4,R11
           net.c   100            int startTicks = RTC_GetTicks();
    000001DC D30B                   MOV.L       L600+16,R3 ; _RTC_GetTicks
    000001DE 2F96                   MOV.L       R9,@-R15
    000001E0 2F86                   MOV.L       R8,@-R15
    000001E2 4F22                   STS.L       PR,@-R15
    000001E4 7FE4                   ADD         #-28,R15
    000001E6 430B                   JSR         @R3
    000001E8 1F52                   MOV.L       R5,@(8,R15)
           net.c   101            Data* data = NULL;
    000001EA EA00                   MOV         #0,R10
    000001EC 1F03                   MOV.L       R0,@(12,R15)
    000001EE 6EA3                   MOV         R10,R14
           net.c   102            unsigned char buf[11];
           net.c   103            int retry = 0;
           net.c   104            
           net.c   105            if (retryCount < 0) {
    000001F0 53F2                   MOV.L       @(8,R15),R3
    000001F2 4311                   CMP/PZ      R3
    000001F4 8D61                   BT/S        L536
    000001F6 68A3                   MOV         R10,R8
           net.c   106                    return NULL;
    000001F8 A08A                   BRA         L535
    000001FA E000                   MOV         #0,R0
    000001FC              L600:                             
    000001FC 2710                   .DATA.W     H'2710
    000001FE 01F4                   .DATA.W     H'01F4
    00000200 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000204 <00000000>             .DATA.L     _RTC_Elapsed_ms
    00000208 <00000000>             .DATA.L     __modlu
    0000020C <00000000>             .DATA.L     _RTC_GetTicks
    00000210              L537:                             
           net.c   107            }
           net.c   108            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   109            while (!RTC_Elapsed_ms(startTicks, timeout)) {
           net.c   110                    unsigned char c;
           net.c   111                    
           net.c   112                    if (Serial_ReadOneByte(&c) == 0 && c == 221) {
    00000210 DD34                   MOV.L       L601+2,R13 ; _Serial_ReadOneByte
    00000212 64F3                   MOV         R15,R4
    00000214 4D0B                   JSR         @R13
    00000216 7404                   ADD         #4,R4
    00000218 2008                   TST         R0,R0
    0000021A 8B4E                   BF          L536
    0000021C 84F4                   MOV.B       @(4,R15),R0
    0000021E 600C                   EXTU.B      R0,R0
    00000220 935F                   MOV.W       L601,R3    ; H'00DD
    00000222 3030                   CMP/EQ      R3,R0
    00000224 8B49                   BF          L536
           net.c   113                            receiveStringTimeout(buf, 11, timeout);
    00000226 6DF3                   MOV         R15,R13
    00000228 7D10                   ADD         #16,R13
    0000022A 66B3                   MOV         R11,R6
    0000022C E50B                   MOV         #11,R5
    0000022E BF21                   BSR         _receiveStringTimeout
    00000230 64D3                   MOV         R13,R4
           net.c   114                            if (strcmp(buf, "DATA", 4) == 0) {
    00000232 E604                   MOV         #4,R6
    00000234 D22D                   MOV.L       L601+10,R2 ; _strcmp
    00000236 DC2C                   MOV.L       L601+6,R12 ; L365
    00000238 65C3                   MOV         R12,R5
    0000023A 420B                   JSR         @R2
    0000023C 64D3                   MOV         R13,R4
    0000023E 2008                   TST         R0,R0
    00000240 8B3B                   BF          L536
           net.c   115                                    int counter = 0;
    00000242 6CA3                   MOV         R10,R12
           net.c   116                                    short received;
           net.c   117                                    data = (Data*) malloc(sizeof(Data));
    00000244 D22A                   MOV.L       L601+14,R2 ; _malloc
    00000246 420B                   JSR         @R2
    00000248 E40C                   MOV         #12,R4
    0000024A 6E03                   MOV         R0,R14
           net.c   118                                    
           net.c   119                                    if (!receiveStringTimeout(buf, 11, timeout)) {
    0000024C 66B3                   MOV         R11,R6
    0000024E E50B                   MOV         #11,R5
    00000250 BF10                   BSR         _receiveStringTimeout
    00000252 64D3                   MOV         R13,R4
    00000254 2008                   TST         R0,R0
    00000256 8909                   BT          L471
           net.c   120                                            retry = 1;
           net.c   121                                            break;
           net.c   122                                    }
           net.c   123                                    data->length = atoi(buf);
    00000258 D326                   MOV.L       L601+18,R3 ; _atoi
    0000025A 430B                   JSR         @R3
    0000025C 64D3                   MOV         R13,R4
           net.c   124                                    
           net.c   125                                    if (!receiveStringTimeout(buf, 11, timeout)) {
    0000025E 66B3                   MOV         R11,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000260 2E02                   MOV.L       R0,@R14
    00000262 E50B                   MOV         #11,R5
    00000264 BF06                   BSR         _receiveStringTimeout
    00000266 64D3                   MOV         R13,R4
    00000268 2008                   TST         R0,R0
    0000026A 8B01                   BF          L542
    0000026C              L471:
           net.c   126                                            retry = 1;
           net.c   127                                            break;
    0000026C A02B                   BRA         L541
    0000026E E801                   MOV         #1,R8
    00000270              L542:                             
           net.c   128                                    }
           net.c   129                                    data->checksum = (unsigned int) atol(buf);
    00000270 D321                   MOV.L       L601+22,R3 ; _atol
    00000272 430B                   JSR         @R3
    00000274 64D3                   MOV         R13,R4
    00000276 1E01                   MOV.L       R0,@(4,R14)
           net.c   130                                    
           net.c   131                                    data->buf = (unsigned char*) malloc(data->length);
    00000278 D21D                   MOV.L       L601+14,R2 ; _malloc
    0000027A 420B                   JSR         @R2
    0000027C 64E2                   MOV.L       @R14,R4
    0000027E 1E02                   MOV.L       R0,@(8,R14)
           net.c   132                                    while (1) {
    00000280              L544:                             
           net.c   133                                            Serial_ReadNBytes(&data->buf[counter], data->length - counter, &re
                         +ceived);
    00000280 DD1E                   MOV.L       L601+26,R13; _Serial_ReadNBytes
    00000282 66F3                   MOV         R15,R6
    00000284 65E2                   MOV.L       @R14,R5
    00000286 35C8                   SUB         R12,R5
    00000288 54E2                   MOV.L       @(8,R14),R4
    0000028A 4D0B                   JSR         @R13
    0000028C 34CC                   ADD         R12,R4
           net.c   134                                            counter += received;
    0000028E 62F1                   MOV.W       @R15,R2
           net.c   135                                            
           net.c   136                                            if (counter >= data->length) {
    00000290 63E2                   MOV.L       @R14,R3
    00000292 3C2C                   ADD         R2,R12
    00000294 3C32                   CMP/HS      R3,R12
    00000296 8B07                   BF          L545
           net.c   137                                                    if (data->checksum != calculateChecksum(data->buf, data->l
                         +ength)) {
    00000298 65E2                   MOV.L       @R14,R5
    0000029A BF79                   BSR         _calculateChecksum
    0000029C 54E2                   MOV.L       @(8,R14),R4
    0000029E 52E1                   MOV.L       @(4,R14),R2
    000002A0 3200                   CMP/EQ      R0,R2
    000002A2 8910                   BT          L541
           net.c   138                                                            retry = 1;
           net.c   139                                                    }
           net.c   140                                                    
           net.c   141                                                    break;
    000002A4 A00F                   BRA         L541
    000002A6 E801                   MOV         #1,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A8              L545:                             
           net.c   142                                            }
           net.c   143    
           net.c   144                                            if (RTC_Elapsed_ms(startTicks, timeout)) {
    000002A8 65B3                   MOV         R11,R5
    000002AA 490B                   JSR         @R9
    000002AC 54F3                   MOV.L       @(12,R15),R4
    000002AE 2008                   TST         R0,R0
    000002B0 89E6                   BT          L544
           net.c   145                                                    freeData(data);
    000002B2 B151                   BSR         _freeData
    000002B4 64E3                   MOV         R14,R4
           net.c   146                                                    data = NULL;
           net.c   147                                                    break;
    000002B6 A006                   BRA         L541
    000002B8 6EA3                   MOV         R10,R14
    000002BA              L536:                             
    000002BA 65B3                   MOV         R11,R5
    000002BC D910                   MOV.L       L601+30,R9 ; _RTC_Elapsed_ms
    000002BE 490B                   JSR         @R9
    000002C0 54F3                   MOV.L       @(12,R15),R4
    000002C2 2008                   TST         R0,R0
    000002C4 89A4                   BT          L537
    000002C6              L541:                             
           net.c   148                                            }
           net.c   149                                    }
           net.c   150    
           net.c   151                                    break;
           net.c   152                            }
           net.c   153                    }
           net.c   154            }
           net.c   155            
           net.c   156            if (retry == 1) {
    000002C6 6083                   MOV         R8,R0
    000002C8 8801                   CMP/EQ      #1,R0
    000002CA 8B1D                   BF          L549
           net.c   157                    freeData(data);
    000002CC B144                   BSR         _freeData
    000002CE 64E3                   MOV         R14,R4
           net.c   158                    data = NULL;
           net.c   159                    sendStatus("DE");
    000002D0 D40C                   MOV.L       L601+34,R4 ; L379
    000002D2 BEBC                   BSR         _sendStatus
    000002D4 0009                   NOP
           net.c   160                    data = receiveDataTimeout(timeout, retryCount - 1);
    000002D6 55F2                   MOV.L       @(8,R15),R5
    000002D8 75FF                   ADD         #-1,R5
    000002DA BF79                   BSR         _receiveDataTimeout
    000002DC 64B3                   MOV         R11,R4
    000002DE A016                   BRA         L550
    000002E0 6E03                   MOV         R0,R14
    000002E2              L601:                             
    000002E2 00DD                   .DATA.W     H'00DD
    000002E4 <00000000>             .DATA.L     _Serial_ReadOneByte
    000002E8 <00000000>             .DATA.L     L365
    000002EC <00000000>             .DATA.L     _strcmp
    000002F0 <00000000>             .DATA.L     _malloc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F4 <00000000>             .DATA.L     _atoi
    000002F8 <00000000>             .DATA.L     _atol
    000002FC <00000000>             .DATA.L     _Serial_ReadNBytes
    00000300 <00000000>             .DATA.L     _RTC_Elapsed_ms
    00000304 <00000000>             .DATA.L     L379
    00000308              L549:                             
           net.c   161            } else {
           net.c   162                    sendStatus("OK");
    00000308 D441                   MOV.L       L602+6,R4  ; L381
    0000030A BEA0                   BSR         _sendStatus
    0000030C 0009                   NOP
    0000030E              L550:                             
           net.c   163            }
           net.c   164            
           net.c   165            return data;
    0000030E 60E3                   MOV         R14,R0
           net.c   166    }
    00000310              L535:                             
    00000310 7F1C                   ADD         #28,R15
    00000312 4F26                   LDS.L       @R15+,PR
    00000314 68F6                   MOV.L       @R15+,R8
    00000316 69F6                   MOV.L       @R15+,R9
    00000318 6AF6                   MOV.L       @R15+,R10
    0000031A 6BF6                   MOV.L       @R15+,R11
    0000031C 6CF6                   MOV.L       @R15+,R12
    0000031E 6DF6                   MOV.L       @R15+,R13
    00000320 000B                   RTS
    00000322 6EF6                   MOV.L       @R15+,R14
           net.c   167    
           net.c   168    void sendNetData(unsigned char* buf, unsigned int length) {
    00000324              _sendNetData:                    ; function: sendNetData
                                                           ; frame size=60
    00000324 2FE6                   MOV.L       R14,@-R15
    00000326 2FD6                   MOV.L       R13,@-R15
    00000328 2FC6                   MOV.L       R12,@-R15
    0000032A 2FB6                   MOV.L       R11,@-R15
    0000032C 2FA6                   MOV.L       R10,@-R15
    0000032E 6B53                   MOV         R5,R11
           net.c   169            unsigned char text[11];
           net.c   170            unsigned int counter = 0;
           net.c   171            
           net.c   172            Serial_BufferedTransmitOneByte((unsigned char) 221);
    00000330 D338                   MOV.L       L602+10,R3 ; _Serial_BufferedTransmitOneByte
    00000332 2F96                   MOV.L       R9,@-R15
    00000334 2F86                   MOV.L       R8,@-R15
    00000336 6843                   MOV         R4,R8
    00000338 4F22                   STS.L       PR,@-R15
    0000033A 7FF4                   ADD         #-12,R15
    0000033C 9465                   MOV.W       L602,R4    ; H'00DD
    0000033E 430B                   JSR         @R3
    00000340 ED00                   MOV         #0,R13
           net.c   173            Serial_BufferedTransmitNBytes("NETDATA", strlen("NETDATA") + 1);
    00000342 DA35                   MOV.L       L602+14,R10; _strlen
    00000344 DC35                   MOV.L       L602+18,R12; _Serial_BufferedTransmitNBytes
    00000346 D436                   MOV.L       L602+22,R4 ; L387
    00000348 4A0B                   JSR         @R10
    0000034A 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000034C D434                   MOV.L       L602+22,R4 ; L387
    0000034E 6503                   MOV         R0,R5
    00000350 4C0B                   JSR         @R12
    00000352 7501                   ADD         #1,R5
           net.c   174            
           net.c   175            sprintf(text, "%u", length);
    00000354 D233                   MOV.L       L602+26,R2 ; L388
    00000356 6EF3                   MOV         R15,R14
    00000358 D333                   MOV.L       L602+30,R3 ; _sprintf
    0000035A 2FB6                   MOV.L       R11,@-R15
    0000035C 2F26                   MOV.L       R2,@-R15
    0000035E 430B                   JSR         @R3
    00000360 64E3                   MOV         R14,R4
           net.c   176            Serial_BufferedTransmitNBytes(text, strlen(text) + 1);
    00000362 4A0B                   JSR         @R10
    00000364 64E3                   MOV         R14,R4
    00000366 6503                   MOV         R0,R5
    00000368 7501                   ADD         #1,R5
    0000036A 4C0B                   JSR         @R12
    0000036C 64E3                   MOV         R14,R4
           net.c   177            
           net.c   178            sprintf(text, "%u", calculateChecksum(buf, length));
    0000036E 65B3                   MOV         R11,R5
    00000370 BF0E                   BSR         _calculateChecksum
    00000372 6483                   MOV         R8,R4
    00000374 2F06                   MOV.L       R0,@-R15
    00000376 D32B                   MOV.L       L602+26,R3 ; L388
    00000378 D22B                   MOV.L       L602+30,R2 ; _sprintf
    0000037A 2F36                   MOV.L       R3,@-R15
    0000037C 420B                   JSR         @R2
    0000037E 64E3                   MOV         R14,R4
    00000380 7F10                   ADD         #16,R15
           net.c   179            Serial_BufferedTransmitNBytes(text, strlen(text) + 1);
    00000382 4A0B                   JSR         @R10
    00000384 64E3                   MOV         R14,R4
    00000386 6503                   MOV         R0,R5
    00000388 7501                   ADD         #1,R5
    0000038A 4C0B                   JSR         @R12
    0000038C 64E3                   MOV         R14,R4
           net.c   180            
           net.c   181            GetAppName(text);
    0000038E D327                   MOV.L       L602+34,R3 ; _GetAppName
    00000390 430B                   JSR         @R3
    00000392 64E3                   MOV         R14,R4
           net.c   182            Serial_BufferedTransmitNBytes(text, strlen(text) + 1);
    00000394 4A0B                   JSR         @R10
    00000396 64E3                   MOV         R14,R4
    00000398 6503                   MOV         R0,R5
    0000039A 7501                   ADD         #1,R5
    0000039C 4C0B                   JSR         @R12
    0000039E 64E3                   MOV         R14,R4
    000003A0 9A34                   MOV.W       L602+2,R10 ; H'0100
           net.c   183            
           net.c   184            while (counter < length) {
    000003A2 A012                   BRA         L551
    000003A4 0009                   NOP
    000003A6              L552:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   185                    int bytes = length - counter;
    000003A6 6EB3                   MOV         R11,R14
    000003A8 3ED8                   SUB         R13,R14
           net.c   186                    
           net.c   187                    if (bytes > 256) {
    000003AA 3EA7                   CMP/GT      R10,R14
    000003AC 8F01                   BF/S        L553
    000003AE 6983                   MOV         R8,R9
           net.c   188                            bytes = 256;
    000003B0 6EA3                   MOV         R10,R14
    000003B2              L553:                             
           net.c   189                    }
           net.c   190                    
           net.c   191                    while (Serial_BufferedTransmitNBytes(&buf[counter], bytes) == 2) {
    000003B2 A004                   BRA         L554
    000003B4 39DC                   ADD         R13,R9
    000003B6              L555:                             
           net.c   192                            bytes = bytes / 2;
    000003B6 E300                   MOV         #0,R3
    000003B8 33E7                   CMP/GT      R14,R3
    000003BA 3E3E                   ADDC        R3,R14
    000003BC 4E21                   SHAR        R14
    000003BE              L554:                             
    000003BE 65E3                   MOV         R14,R5
    000003C0 4C0B                   JSR         @R12
    000003C2 6493                   MOV         R9,R4
    000003C4 8802                   CMP/EQ      #2,R0
    000003C6 89F6                   BT          L555
           net.c   193                    }
           net.c   194                    
           net.c   195                    counter += bytes;
    000003C8 3DEC                   ADD         R14,R13
    000003CA              L551:                             
    000003CA 3DB2                   CMP/HS      R11,R13
    000003CC 8BEB                   BF          L552
           net.c   196            }
           net.c   197    }
    000003CE 7F0C                   ADD         #12,R15
    000003D0 4F26                   LDS.L       @R15+,PR
    000003D2 68F6                   MOV.L       @R15+,R8
    000003D4 69F6                   MOV.L       @R15+,R9
    000003D6 6AF6                   MOV.L       @R15+,R10
    000003D8 6BF6                   MOV.L       @R15+,R11
    000003DA 6CF6                   MOV.L       @R15+,R12
    000003DC 6DF6                   MOV.L       @R15+,R13
    000003DE 000B                   RTS
    000003E0 6EF6                   MOV.L       @R15+,R14
           net.c   198    
           net.c   199    NetData* receiveNetData() {
    000003E2              _receiveNetData:                 ; function: receiveNetData
                                                           ; frame size=0
           net.c   200            return receiveNetDataTimeout(500);
    000003E2 9414                   MOV.W       L602+4,R4  ; H'01F4
    000003E4 A000                   BRA         _receiveNetDataTimeout
    000003E6 0009                   NOP
           net.c   201    }
           net.c   202    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   203    NetData* receiveNetDataTimeout(int timeout) {
    000003E8              _receiveNetDataTimeout:          ; function: receiveNetDataTimeout
                                                           ; frame size=56
    000003E8 2FE6                   MOV.L       R14,@-R15
    000003EA 2FD6                   MOV.L       R13,@-R15
    000003EC 2FC6                   MOV.L       R12,@-R15
    000003EE 2FB6                   MOV.L       R11,@-R15
    000003F0 2FA6                   MOV.L       R10,@-R15
    000003F2 EB00                   MOV         #0,R11
           net.c   204            int startTicks = RTC_GetTicks();
    000003F4 D30E                   MOV.L       L602+38,R3 ; _RTC_GetTicks
    000003F6 2F96                   MOV.L       R9,@-R15
    000003F8 2F86                   MOV.L       R8,@-R15
    000003FA 4F22                   STS.L       PR,@-R15
    000003FC 7FE8                   ADD         #-24,R15
    000003FE 430B                   JSR         @R3
    00000400 1F42                   MOV.L       R4,@(8,R15)
    00000402 6A03                   MOV         R0,R10
           net.c   205            NetData* data = NULL;
    00000404 6EB3                   MOV         R11,R14
           net.c   206            unsigned char buf[11];
           net.c   207            int retry = 0;
           net.c   208            
           net.c   209            while (!RTC_Elapsed_ms(startTicks, timeout)) {
    00000406 A07A                   BRA         L557
    00000408 68B3                   MOV         R11,R8
    0000040A              L602:                             
    0000040A 00DD                   .DATA.W     H'00DD
    0000040C 0100                   .DATA.W     H'0100
    0000040E 01F4                   .DATA.W     H'01F4
    00000410 <00000000>             .DATA.L     L381
    00000414 <00000000>             .DATA.L     _Serial_BufferedTransmitOneByte
    00000418 <00000000>             .DATA.L     _strlen
    0000041C <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    00000420 <00000000>             .DATA.L     L387
    00000424 <00000000>             .DATA.L     L388
    00000428 <00000000>             .DATA.L     _sprintf
    0000042C <00000000>             .DATA.L     _GetAppName
    00000430 <00000000>             .DATA.L     _RTC_GetTicks
    00000434              L558:                             
           net.c   210                    unsigned char c;
           net.c   211                    
           net.c   212                    if (Serial_ReadOneByte(&c) == 0 && c == 221) {
    00000434 DD3E                   MOV.L       L603+4,R13 ; _Serial_ReadOneByte
    00000436 64F3                   MOV         R15,R4
    00000438 4D0B                   JSR         @R13
    0000043A 7404                   ADD         #4,R4
    0000043C 2008                   TST         R0,R0
    0000043E 8B5E                   BF          L557
    00000440 84F4                   MOV.B       @(4,R15),R0
    00000442 600C                   EXTU.B      R0,R0
    00000444 9372                   MOV.W       L603,R3    ; H'00DD
    00000446 3030                   CMP/EQ      R3,R0
    00000448 8B59                   BF          L557
           net.c   213                            receiveStringTimeout(buf, 11, 1000);
    0000044A 6DF3                   MOV         R15,R13
    0000044C 9C6F                   MOV.W       L603+2,R12 ; H'03E8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000044E E50B                   MOV         #11,R5
    00000450 7D0C                   ADD         #12,R13
    00000452 66C3                   MOV         R12,R6
    00000454 BE0E                   BSR         _receiveStringTimeout
    00000456 64D3                   MOV         R13,R4
           net.c   214                            if (strcmp(buf, "NETDATA", 7) == 0) {
    00000458 D536                   MOV.L       L603+8,R5  ; L387
    0000045A E607                   MOV         #7,R6
    0000045C D236                   MOV.L       L603+12,R2 ; _strcmp
    0000045E 420B                   JSR         @R2
    00000460 64D3                   MOV         R13,R4
    00000462 2008                   TST         R0,R0
    00000464 8B4B                   BF          L557
           net.c   215                                    int counter = 0;
    00000466 6AB3                   MOV         R11,R10
           net.c   216                                    short received;
           net.c   217                                    data = (NetData*) malloc(sizeof(NetData));
    00000468 D234                   MOV.L       L603+16,R2 ; _malloc
    0000046A 420B                   JSR         @R2
    0000046C E418                   MOV         #24,R4
    0000046E 6E03                   MOV         R0,R14
           net.c   218                                    
           net.c   219                                    if (!receiveStringTimeout(buf, 11, 1000)) {
    00000470 66C3                   MOV         R12,R6
    00000472 E50B                   MOV         #11,R5
    00000474 BDFE                   BSR         _receiveStringTimeout
    00000476 64D3                   MOV         R13,R4
    00000478 2008                   TST         R0,R0
    0000047A 8913                   BT          L474
           net.c   220                                            retry = 1;
           net.c   221                                            break;
           net.c   222                                    }
           net.c   223                                    data->length = atoi(buf);
    0000047C D230                   MOV.L       L603+20,R2 ; _atoi
    0000047E 420B                   JSR         @R2
    00000480 64D3                   MOV         R13,R4
           net.c   224                                    
           net.c   225                                    if (!receiveStringTimeout(buf, 11, 1000)) {
    00000482 66C3                   MOV         R12,R6
    00000484 2E02                   MOV.L       R0,@R14
    00000486 E50B                   MOV         #11,R5
    00000488 BDF4                   BSR         _receiveStringTimeout
    0000048A 64D3                   MOV         R13,R4
    0000048C 2008                   TST         R0,R0
    0000048E 8909                   BT          L474
           net.c   226                                            retry = 1;
           net.c   227                                            break;
           net.c   228                                    }
           net.c   229                                    data->checksum = (unsigned int) atol(buf);
    00000490 D32C                   MOV.L       L603+24,R3 ; _atol
    00000492 430B                   JSR         @R3
    00000494 64D3                   MOV         R13,R4
           net.c   230                                    
           net.c   231                                    if (!receiveStringTimeout(buf, 11, 1000)) {
    00000496 66C3                   MOV         R12,R6
    00000498 1E01                   MOV.L       R0,@(4,R14)
    0000049A E50B                   MOV         #11,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000049C BDEA                   BSR         _receiveStringTimeout
    0000049E 64D3                   MOV         R13,R4
    000004A0 2008                   TST         R0,R0
    000004A2 8B01                   BF          L564
    000004A4              L474:
           net.c   232                                            retry = 1;
           net.c   233                                            break;
    000004A4 A031                   BRA         L562
    000004A6 E801                   MOV         #1,R8
    000004A8              L564:                             
           net.c   234                                    }
           net.c   235                                    memcpy(data->appName, buf, 9);
    000004A8 D327                   MOV.L       L603+28,R3 ; _memcpy
    000004AA E609                   MOV         #9,R6
    000004AC 65D3                   MOV         R13,R5
    000004AE 64E3                   MOV         R14,R4
    000004B0 430B                   JSR         @R3
    000004B2 7408                   ADD         #8,R4
           net.c   236                                    
           net.c   237                                    startTicks = RTC_GetTicks();
    000004B4 D225                   MOV.L       L603+32,R2 ; _RTC_GetTicks
    000004B6 420B                   JSR         @R2
    000004B8 0009                   NOP
    000004BA 6D03                   MOV         R0,R13
           net.c   238                                    data->buf = (unsigned char*) malloc(data->length);
    000004BC D31F                   MOV.L       L603+16,R3 ; _malloc
    000004BE 430B                   JSR         @R3
    000004C0 64E2                   MOV.L       @R14,R4
    000004C2 1E05                   MOV.L       R0,@(20,R14)
           net.c   239                                    while (1) {
    000004C4              L566:                             
           net.c   240                                            Serial_ReadNBytes(&data->buf[counter], data->length - counter, &re
                         +ceived);
    000004C4 65E2                   MOV.L       @R14,R5
    000004C6 66F3                   MOV         R15,R6
    000004C8 54E5                   MOV.L       @(20,R14),R4
    000004CA 35A8                   SUB         R10,R5
    000004CC D320                   MOV.L       L603+36,R3 ; _Serial_ReadNBytes
    000004CE 430B                   JSR         @R3
    000004D0 34AC                   ADD         R10,R4
           net.c   241                                            counter += received;
    000004D2 62F1                   MOV.W       @R15,R2
           net.c   242                                            
           net.c   243                                            if (counter >= data->length) {
    000004D4 63E2                   MOV.L       @R14,R3
    000004D6 3A2C                   ADD         R2,R10
    000004D8 3A32                   CMP/HS      R3,R10
    000004DA 8B07                   BF          L567
           net.c   244                                                    if (data->checksum != calculateChecksum(data->buf, data->l
                         +ength)) {
    000004DC 65E2                   MOV.L       @R14,R5
    000004DE BE57                   BSR         _calculateChecksum
    000004E0 54E5                   MOV.L       @(20,R14),R4
    000004E2 52E1                   MOV.L       @(4,R14),R2
    000004E4 3200                   CMP/EQ      R0,R2
    000004E6 8910                   BT          L562
           net.c   245                                                            retry = 1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   246                                                    }
           net.c   247                                                    
           net.c   248                                                    break;
    000004E8 A00F                   BRA         L562
    000004EA E801                   MOV         #1,R8
    000004EC              L567:                             
           net.c   249                                            }
           net.c   250    
           net.c   251                                            if (RTC_Elapsed_ms(startTicks, 1000)) {
    000004EC 65C3                   MOV         R12,R5
    000004EE 490B                   JSR         @R9
    000004F0 64D3                   MOV         R13,R4
    000004F2 2008                   TST         R0,R0
    000004F4 89E6                   BT          L566
           net.c   252                                                    freeNetData(data);
    000004F6 B044                   BSR         _freeNetData
    000004F8 64E3                   MOV         R14,R4
           net.c   253                                                    data = NULL;
           net.c   254                                                    break;
    000004FA A006                   BRA         L562
    000004FC 6EB3                   MOV         R11,R14
    000004FE              L557:                             
    000004FE D915                   MOV.L       L603+40,R9 ; _RTC_Elapsed_ms
    00000500 55F2                   MOV.L       @(8,R15),R5
    00000502 490B                   JSR         @R9
    00000504 64A3                   MOV         R10,R4
    00000506 2008                   TST         R0,R0
    00000508 8994                   BT          L558
    0000050A              L562:                             
           net.c   255                                            }
           net.c   256                                    }
           net.c   257    
           net.c   258                                    break;
           net.c   259                            }
           net.c   260                    }
           net.c   261            }
           net.c   262            
           net.c   263            if (retry == 1) {
    0000050A 6083                   MOV         R8,R0
    0000050C 8801                   CMP/EQ      #1,R0
    0000050E 8B02                   BF          L571
           net.c   264                    freeNetData(data);
    00000510 B037                   BSR         _freeNetData
    00000512 64E3                   MOV         R14,R4
           net.c   265                    data = NULL;
    00000514 6EB3                   MOV         R11,R14
    00000516              L571:                             
           net.c   266            }
           net.c   267            
           net.c   268            return data;
    00000516 60E3                   MOV         R14,R0
           net.c   269    }
    00000518 7F18                   ADD         #24,R15
    0000051A 4F26                   LDS.L       @R15+,PR
    0000051C 68F6                   MOV.L       @R15+,R8
    0000051E 69F6                   MOV.L       @R15+,R9
    00000520 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000522 6BF6                   MOV.L       @R15+,R11
    00000524 6CF6                   MOV.L       @R15+,R12
    00000526 6DF6                   MOV.L       @R15+,R13
    00000528 000B                   RTS
    0000052A 6EF6                   MOV.L       @R15+,R14
    0000052C              L603:                             
    0000052C 00DD                   .DATA.W     H'00DD
    0000052E 03E8                   .DATA.W     H'03E8
    00000530 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000534 <00000000>             .DATA.L     L387
    00000538 <00000000>             .DATA.L     _strcmp
    0000053C <00000000>             .DATA.L     _malloc
    00000540 <00000000>             .DATA.L     _atoi
    00000544 <00000000>             .DATA.L     _atol
    00000548 <00000000>             .DATA.L     _memcpy
    0000054C <00000000>             .DATA.L     _RTC_GetTicks
    00000550 <00000000>             .DATA.L     _Serial_ReadNBytes
    00000554 <00000000>             .DATA.L     _RTC_Elapsed_ms
           net.c   270    
           net.c   271    void freeData(Data* data) {
    00000558              _freeData:                       ; function: freeData
                                                           ; frame size=8
    00000558 2FE6                   MOV.L       R14,@-R15
    0000055A 6E43                   MOV         R4,R14
    0000055C 4F22                   STS.L       PR,@-R15
           net.c   272            if (data != NULL) {
    0000055E 2EE8                   TST         R14,R14
    00000560 890C                   BT          L573
           net.c   273                    if (data->buf != NULL) {
    00000562 52E2                   MOV.L       @(8,R14),R2
    00000564 2228                   TST         R2,R2
    00000566 8904                   BT          L574
           net.c   274                            free(data->buf);
    00000568 D32A                   MOV.L       L604+4,R3  ; _free
    0000056A 430B                   JSR         @R3
    0000056C 54E2                   MOV.L       @(8,R14),R4
           net.c   275                            data->buf = NULL;
    0000056E E200                   MOV         #0,R2
    00000570 1E22                   MOV.L       R2,@(8,R14)
    00000572              L574:                             
           net.c   276                    }
           net.c   277                    
           net.c   278                    free(data);
    00000572 64E3                   MOV         R14,R4
    00000574 4F26                   LDS.L       @R15+,PR
    00000576 D327                   MOV.L       L604+4,R3  ; _free
    00000578 432B                   JMP         @R3
    0000057A 6EF6                   MOV.L       @R15+,R14
    0000057C              L573:                             
           net.c   279            }
           net.c   280    }
    0000057C 4F26                   LDS.L       @R15+,PR
    0000057E 000B                   RTS
    00000580 6EF6                   MOV.L       @R15+,R14
           net.c   281    
           net.c   282    void freeNetData(NetData* data) {
    00000582              _freeNetData:                    ; function: freeNetData




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=8
    00000582 2FE6                   MOV.L       R14,@-R15
    00000584 4F22                   STS.L       PR,@-R15
    00000586 6E43                   MOV         R4,R14
           net.c   283            if (data != NULL) {
    00000588 2EE8                   TST         R14,R14
    0000058A 890C                   BT          L575
           net.c   284                    if (data->buf != NULL) {
    0000058C 52E5                   MOV.L       @(20,R14),R2
    0000058E 2228                   TST         R2,R2
    00000590 8904                   BT          L576
           net.c   285                            free(data->buf);
    00000592 D320                   MOV.L       L604+4,R3  ; _free
    00000594 430B                   JSR         @R3
    00000596 54E5                   MOV.L       @(20,R14),R4
           net.c   286                            data->buf = NULL;
    00000598 E200                   MOV         #0,R2
    0000059A 1E25                   MOV.L       R2,@(20,R14)
    0000059C              L576:                             
           net.c   287                    }
           net.c   288                    
           net.c   289                    free(data);
    0000059C 4F26                   LDS.L       @R15+,PR
    0000059E 64E3                   MOV         R14,R4
    000005A0 D31C                   MOV.L       L604+4,R3  ; _free
    000005A2 432B                   JMP         @R3
    000005A4 6EF6                   MOV.L       @R15+,R14
    000005A6              L575:                             
           net.c   290            }
           net.c   291    }
    000005A6 4F26                   LDS.L       @R15+,PR
    000005A8 000B                   RTS
    000005AA 6EF6                   MOV.L       @R15+,R14
           net.c   292    
           net.c   293    void freeNetList(NetworkList* netList) {
    000005AC              _freeNetList:                    ; function: freeNetList
                                                           ; frame size=8
    000005AC 2FE6                   MOV.L       R14,@-R15
    000005AE 6E43                   MOV         R4,R14
    000005B0 4F22                   STS.L       PR,@-R15
           net.c   294            if (netList != NULL) {
    000005B2 2EE8                   TST         R14,R14
    000005B4 890C                   BT          L577
           net.c   295                    freeNetList(netList->next);
    000005B6 BFF9                   BSR         _freeNetList
    000005B8 54E3                   MOV.L       @(12,R14),R4
           net.c   296                    if (netList->network.ssid != NULL) {
    000005BA 63E2                   MOV.L       @R14,R3
    000005BC 2338                   TST         R3,R3
    000005BE 8902                   BT          L578
           net.c   297                            free(netList->network.ssid);
    000005C0 D314                   MOV.L       L604+4,R3  ; _free
    000005C2 430B                   JSR         @R3
    000005C4 64E2                   MOV.L       @R14,R4
    000005C6              L578:                             
           net.c   298                    }
           net.c   299                    free(netList);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005C6 64E3                   MOV         R14,R4
    000005C8 4F26                   LDS.L       @R15+,PR
    000005CA D212                   MOV.L       L604+4,R2  ; _free
    000005CC 422B                   JMP         @R2
    000005CE 6EF6                   MOV.L       @R15+,R14
    000005D0              L577:                             
           net.c   300            }
           net.c   301    }
    000005D0 4F26                   LDS.L       @R15+,PR
    000005D2 000B                   RTS
    000005D4 6EF6                   MOV.L       @R15+,R14
           net.c   302    
           net.c   303    NetworkList* getAvailableNetworks() {
    000005D6              _getAvailableNetworks:           ; function: getAvailableNetworks
                                                           ; frame size=40
    000005D6 2FE6                   MOV.L       R14,@-R15
    000005D8 2FD6                   MOV.L       R13,@-R15
    000005DA 2FC6                   MOV.L       R12,@-R15
    000005DC 2FB6                   MOV.L       R11,@-R15
           net.c   304            int status;
           net.c   305            Data* data = NULL;
           net.c   306            int counter;
           net.c   307            NetworkList *head = NULL, *tail = NULL;
    000005DE EC00                   MOV         #0,R12
           net.c   308            
           net.c   309            sendCommand((unsigned char*) "GETNETS");
    000005E0 D40D                   MOV.L       L604+8,R4  ; L434
    000005E2 2FA6                   MOV.L       R10,@-R15
    000005E4 2F96                   MOV.L       R9,@-R15
    000005E6 69C3                   MOV         R12,R9
    000005E8 2F86                   MOV.L       R8,@-R15
    000005EA 4F22                   STS.L       PR,@-R15
    000005EC 7FF8                   ADD         #-8,R15
    000005EE BD1E                   BSR         _sendCommand
    000005F0 68C3                   MOV         R12,R8
           net.c   310            status = receiveStatus();
    000005F2 BD7B                   BSR         _receiveStatus
    000005F4 0009                   NOP
    000005F6 6403                   MOV         R0,R4
           net.c   311            
           net.c   312            if (status != STATUS_OK) {
    000005F8 2448                   TST         R4,R4
    000005FA 8B05                   BF          L476
           net.c   313                    return NULL;
           net.c   314            }
           net.c   315            
           net.c   316            data = receiveDataTimeout(20000, 5);
    000005FC 9408                   MOV.W       L604,R4    ; H'4E20
    000005FE BDE7                   BSR         _receiveDataTimeout
    00000600 E505                   MOV         #5,R5
    00000602 6D03                   MOV         R0,R13
           net.c   317            if (data == NULL) {
    00000604 2DD8                   TST         R13,R13
    00000606 8B01                   BF          L581
    00000608              L476:
           net.c   318                    return NULL;
    00000608 A05F                   BRA         L580




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000060A E000                   MOV         #0,R0
    0000060C              L581:                             
           net.c   319            }
           net.c   320            
           net.c   321            counter = 0;
           net.c   322            while (counter < data->length) {
    0000060C A057                   BRA         L582
    0000060E 6EC3                   MOV         R12,R14
    00000610              L604:                             
    00000610 4E20                   .DATA.W     H'4E20
    00000612 0000                   .DATA.W     0
    00000614 <00000000>             .DATA.L     _free
    00000618 <00000000>             .DATA.L     L434
    0000061C              L583:                             
           net.c   323                    NetworkList* netElement;
           net.c   324                    int ssidLength;
           net.c   325                    
           net.c   326                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    0000061C DB4B                   MOV.L       L605+2,R11 ; _memchr
    0000061E E500                   MOV         #0,R5
    00000620 54D2                   MOV.L       @(8,R13),R4
    00000622 66D2                   MOV.L       @R13,R6
    00000624 36E8                   SUB         R14,R6
    00000626 4B0B                   JSR         @R11
    00000628 34EC                   ADD         R14,R4
    0000062A 2008                   TST         R0,R0
    0000062C 894A                   BT          L585
           net.c   327                            break;
           net.c   328                    }
           net.c   329                    
           net.c   330                    netElement = (NetworkList*) malloc(sizeof(NetworkList));
    0000062E D248                   MOV.L       L605+6,R2  ; _malloc
    00000630 420B                   JSR         @R2
    00000632 E410                   MOV         #16,R4
           net.c   331                    ssidLength = strlen(&data->buf[counter]);
    00000634 DA47                   MOV.L       L605+10,R10; _strlen
    00000636 6C03                   MOV         R0,R12
    00000638 54D2                   MOV.L       @(8,R13),R4
    0000063A 4A0B                   JSR         @R10
    0000063C 34EC                   ADD         R14,R4
           net.c   332                    
           net.c   333                    netElement->network.ssid = (unsigned char*) malloc(ssidLength + 1);
    0000063E 6403                   MOV         R0,R4
    00000640 D343                   MOV.L       L605+6,R3  ; _malloc
    00000642 7401                   ADD         #1,R4
    00000644 2F02                   MOV.L       R0,@R15
    00000646 430B                   JSR         @R3
    00000648 1F41                   MOV.L       R4,@(4,R15)
    0000064A 2C02                   MOV.L       R0,@R12
           net.c   334                    strncpy(netElement->network.ssid, &data->buf[counter], ssidLength);
    0000064C 66F2                   MOV.L       @R15,R6
    0000064E 55D2                   MOV.L       @(8,R13),R5
    00000650 D341                   MOV.L       L605+14,R3 ; _strncpy
    00000652 35EC                   ADD         R14,R5
    00000654 430B                   JSR         @R3
    00000656 64C2                   MOV.L       @R12,R4
           net.c   335                    counter += ssidLength + 1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000658 52F1                   MOV.L       @(4,R15),R2
           net.c   336                    
           net.c   337                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    0000065A E500                   MOV         #0,R5
    0000065C 54D2                   MOV.L       @(8,R13),R4
    0000065E 3E2C                   ADD         R2,R14
    00000660 66D2                   MOV.L       @R13,R6
    00000662 36E8                   SUB         R14,R6
    00000664 4B0B                   JSR         @R11
    00000666 34EC                   ADD         R14,R4
    00000668 2008                   TST         R0,R0
    0000066A 8911                   BT          L477
           net.c   338                            free(netElement->network.ssid);
           net.c   339                            free(netElement);
           net.c   340                            break;
           net.c   341                    }
           net.c   342                    
           net.c   343                    netElement->network.rssi = atoi(&data->buf[counter]);
    0000066C 54D2                   MOV.L       @(8,R13),R4
    0000066E D23B                   MOV.L       L605+18,R2 ; _atoi
    00000670 420B                   JSR         @R2
    00000672 34EC                   ADD         R14,R4
    00000674 1C01                   MOV.L       R0,@(4,R12)
           net.c   344                    counter += strlen(&data->buf[counter]) + 1;
    00000676 54D2                   MOV.L       @(8,R13),R4
    00000678 4A0B                   JSR         @R10
    0000067A 34EC                   ADD         R14,R4
           net.c   345                    
           net.c   346                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    0000067C 66D2                   MOV.L       @R13,R6
    0000067E E500                   MOV         #0,R5
    00000680 54D2                   MOV.L       @(8,R13),R4
    00000682 7001                   ADD         #1,R0
    00000684 3E0C                   ADD         R0,R14
    00000686 36E8                   SUB         R14,R6
    00000688 4B0B                   JSR         @R11
    0000068A 34EC                   ADD         R14,R4
    0000068C 2008                   TST         R0,R0
    0000068E 8B06                   BF          L587
    00000690              L477:
           net.c   347                            free(netElement->network.ssid);
    00000690 DE33                   MOV.L       L605+22,R14; _free
    00000692 4E0B                   JSR         @R14
    00000694 64C2                   MOV.L       @R12,R4
           net.c   348                            free(netElement);
    00000696 4E0B                   JSR         @R14
    00000698 64C3                   MOV         R12,R4
           net.c   349                            break;
    0000069A A013                   BRA         L585
    0000069C 0009                   NOP
    0000069E              L587:                             
           net.c   350                    }
           net.c   351                    
           net.c   352                    netElement->network.encType = atoi(&data->buf[counter]);
    0000069E 54D2                   MOV.L       @(8,R13),R4
    000006A0 D32E                   MOV.L       L605+18,R3 ; _atoi
    000006A2 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006A4 34EC                   ADD         R14,R4
    000006A6 1C02                   MOV.L       R0,@(8,R12)
           net.c   353                    counter += strlen(&data->buf[counter]) + 1;
    000006A8 54D2                   MOV.L       @(8,R13),R4
    000006AA 4A0B                   JSR         @R10
    000006AC 34EC                   ADD         R14,R4
    000006AE 7001                   ADD         #1,R0
           net.c   354                    
           net.c   355                    if (head == NULL) {
    000006B0 2998                   TST         R9,R9
    000006B2 8F02                   BF/S        L588
    000006B4 3E0C                   ADD         R0,R14
    000006B6 A001                   BRA         L475
           net.c   356                            head = netElement;
    000006B8 69C3                   MOV         R12,R9
    000006BA              L588:                             
           net.c   357                            tail = netElement;
           net.c   358                    } else {
           net.c   359                            tail->next = netElement;
    000006BA 18C3                   MOV.L       R12,@(12,R8)
    000006BC              L475:
           net.c   360                            tail = netElement;
    000006BC 68C3                   MOV         R12,R8
    000006BE              L582:                             
    000006BE 63D2                   MOV.L       @R13,R3
    000006C0 3E32                   CMP/HS      R3,R14
    000006C2 8BAB                   BF          L583
    000006C4              L585:                             
           net.c   361                    }
           net.c   362            }
           net.c   363            
           net.c   364            freeData(data);
    000006C4 BF48                   BSR         _freeData
    000006C6 64D3                   MOV         R13,R4
           net.c   365            
           net.c   366            return head;
    000006C8 6093                   MOV         R9,R0
           net.c   367    }
    000006CA              L580:                             
    000006CA 7F08                   ADD         #8,R15
    000006CC 4F26                   LDS.L       @R15+,PR
    000006CE 68F6                   MOV.L       @R15+,R8
    000006D0 69F6                   MOV.L       @R15+,R9
    000006D2 6AF6                   MOV.L       @R15+,R10
    000006D4 6BF6                   MOV.L       @R15+,R11
    000006D6 6CF6                   MOV.L       @R15+,R12
    000006D8 6DF6                   MOV.L       @R15+,R13
    000006DA 000B                   RTS
    000006DC 6EF6                   MOV.L       @R15+,R14
           net.c   368    
           net.c   369    int connect(int index, unsigned char* pass) {
    000006DE              _connect:                        ; function: connect
                                                           ; frame size=68
    000006DE 2FE6                   MOV.L       R14,@-R15
    000006E0 4F22                   STS.L       PR,@-R15
    000006E2 7FCC                   ADD         #-52,R15
    000006E4 1F41                   MOV.L       R4,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   370            unsigned char* buf[11];
           net.c   371            int status;
           net.c   372            
           net.c   373            sendCommand((unsigned char*) "CONNECT");
    000006E6 D41F                   MOV.L       L605+26,R4 ; L452
    000006E8 BCA1                   BSR         _sendCommand
    000006EA 2F52                   MOV.L       R5,@R15
           net.c   374            sprintf(buf, "%d", index);
    000006EC 52F1                   MOV.L       @(4,R15),R2
    000006EE 6EF3                   MOV         R15,R14
    000006F0 D31D                   MOV.L       L605+30,R3 ; L453
    000006F2 7E08                   ADD         #8,R14
    000006F4 2F26                   MOV.L       R2,@-R15
    000006F6 2F36                   MOV.L       R3,@-R15
    000006F8 D21C                   MOV.L       L605+34,R2 ; _sprintf
    000006FA 420B                   JSR         @R2
    000006FC 64E3                   MOV         R14,R4
    000006FE 7F08                   ADD         #8,R15
           net.c   375            Serial_BufferedTransmitNBytes(buf, strlen(buf) + 1);
    00000700 D314                   MOV.L       L605+10,R3 ; _strlen
    00000702 430B                   JSR         @R3
    00000704 64E3                   MOV         R14,R4
    00000706 6503                   MOV         R0,R5
    00000708 D219                   MOV.L       L605+38,R2 ; _Serial_BufferedTransmitNBytes
    0000070A 7501                   ADD         #1,R5
    0000070C 420B                   JSR         @R2
    0000070E 64E3                   MOV         R14,R4
           net.c   376            Serial_BufferedTransmitNBytes(pass, strlen(pass) + 1);
    00000710 D310                   MOV.L       L605+10,R3 ; _strlen
    00000712 430B                   JSR         @R3
    00000714 64F2                   MOV.L       @R15,R4
    00000716 6503                   MOV         R0,R5
    00000718 D315                   MOV.L       L605+38,R3 ; _Serial_BufferedTransmitNBytes
    0000071A 7501                   ADD         #1,R5
    0000071C 430B                   JSR         @R3
    0000071E 64F2                   MOV.L       @R15,R4
           net.c   377            
           net.c   378            status = receiveStatus();
    00000720 BCE4                   BSR         _receiveStatus
    00000722 0009                   NOP
    00000724 6403                   MOV         R0,R4
           net.c   379            
           net.c   380            if (status == STATUS_OK) {
    00000726 2448                   TST         R4,R4
    00000728 0029                   MOVT        R0
           net.c   381                    return 1;
           net.c   382            }
           net.c   383            
           net.c   384            return 0;
           net.c   385    }
    0000072A 7F34                   ADD         #52,R15
    0000072C 4F26                   LDS.L       @R15+,PR
    0000072E 000B                   RTS
    00000730 6EF6                   MOV.L       @R15+,R14
           net.c   386    
           net.c   387    int disconnect() {
    00000732              _disconnect:                     ; function: disconnect




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=4
    00000732 4F22                   STS.L       PR,@-R15
           net.c   388            int status;
           net.c   389            
           net.c   390            sendCommand((unsigned char*) "DISCONNECT");
    00000734 D40F                   MOV.L       L605+42,R4 ; L457
    00000736 BC7A                   BSR         _sendCommand
    00000738 0009                   NOP
           net.c   391            status = receiveStatus();
    0000073A BCD7                   BSR         _receiveStatus
    0000073C 0009                   NOP
    0000073E 6403                   MOV         R0,R4
           net.c   392            
           net.c   393            if (status == STATUS_OK) {
           net.c   394                    return 1;
           net.c   395            }
           net.c   396            
           net.c   397            return 0;
           net.c   398    }
    00000740 4F26                   LDS.L       @R15+,PR
    00000742 2448                   TST         R4,R4
    00000744 0029                   MOVT        R0
    00000746 000B                   RTS
    00000748 0009                   NOP
    0000074A              L605:                             
    0000074A 0000                   .DATA.W     0
    0000074C <00000000>             .DATA.L     _memchr
    00000750 <00000000>             .DATA.L     _malloc
    00000754 <00000000>             .DATA.L     _strlen
    00000758 <00000000>             .DATA.L     _strncpy
    0000075C <00000000>             .DATA.L     _atoi
    00000760 <00000000>             .DATA.L     _free
    00000764 <00000000>             .DATA.L     L452
    00000768 <00000000>             .DATA.L     L453
    0000076C <00000000>             .DATA.L     _sprintf
    00000770 <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    00000774 <00000000>             .DATA.L     L457
           net.c   399    
           net.c   400    Network getNetworkInfo() {
    00000778              _getNetworkInfo:                 ; function: getNetworkInfo
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    00000778 2FE6                   MOV.L       R14,@-R15
    0000077A 2FD6                   MOV.L       R13,@-R15
    0000077C 2FC6                   MOV.L       R12,@-R15
    0000077E 2FB6                   MOV.L       R11,@-R15
    00000780 4F22                   STS.L       PR,@-R15
           net.c   401            int status;
           net.c   402            Network net;
           net.c   403            Data* data;
           net.c   404            
           net.c   405            net.ssid = NULL;
    00000782 EB00                   MOV         #0,R11
           net.c   406            net.rssi = 0;
           net.c   407            net.encType = 0;
           net.c   408            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   409            sendCommand((unsigned char*) "GETNETINFO");
    00000784 D426                   MOV.L       L606+2,R4  ; L463
    00000786 7FF0                   ADD         #-16,R15
    00000788 6DF3                   MOV         R15,R13
    0000078A 7D04                   ADD         #4,R13
    0000078C 2DB2                   MOV.L       R11,@R13
    0000078E 1DB1                   MOV.L       R11,@(4,R13)
    00000790 BC4D                   BSR         _sendCommand
    00000792 1DB2                   MOV.L       R11,@(8,R13)
           net.c   410            status = receiveStatus();
    00000794 BCAA                   BSR         _receiveStatus
    00000796 0009                   NOP
    00000798 6403                   MOV         R0,R4
           net.c   411            
           net.c   412            if (status != STATUS_OK) {
    0000079A 2448                   TST         R4,R4
    0000079C 8B33                   BF          L487
           net.c   413                    return net;
           net.c   414            }
           net.c   415            
           net.c   416            data = receiveDataTimeout(500, 1);
    0000079E 943E                   MOV.W       L606,R4    ; H'01F4
    000007A0 BD16                   BSR         _receiveDataTimeout
    000007A2 E501                   MOV         #1,R5
    000007A4 6E03                   MOV         R0,R14
           net.c   417            if (data == NULL) {
    000007A6 2EE8                   TST         R14,R14
    000007A8 892D                   BT          L487
           net.c   418                    return net;
           net.c   419            }
           net.c   420            
           net.c   421            {
           net.c   422                    int counter = 0;
    000007AA 6CB3                   MOV         R11,R12
           net.c   423                    int ssidLength;
           net.c   424                    
           net.c   425                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    000007AC 66E2                   MOV.L       @R14,R6
    000007AE E500                   MOV         #0,R5
    000007B0 D31C                   MOV.L       L606+6,R3  ; _memchr
    000007B2 430B                   JSR         @R3
    000007B4 54E2                   MOV.L       @(8,R14),R4
    000007B6 2008                   TST         R0,R0
    000007B8 8925                   BT          L487
           net.c   426                            return net;
           net.c   427                    }
           net.c   428                    
           net.c   429                    ssidLength = strlen(&data->buf[counter]);
    000007BA D31B                   MOV.L       L606+10,R3 ; _strlen
    000007BC 430B                   JSR         @R3
    000007BE 54E2                   MOV.L       @(8,R14),R4
           net.c   430                    
           net.c   431                    net.ssid = (unsigned char*) malloc(ssidLength + 1);
    000007C0 D31A                   MOV.L       L606+14,R3 ; _malloc
    000007C2 6B03                   MOV         R0,R11
    000007C4 6403                   MOV         R0,R4
    000007C6 7401                   ADD         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007C8 430B                   JSR         @R3
    000007CA 2F42                   MOV.L       R4,@R15
    000007CC 2D02                   MOV.L       R0,@R13
           net.c   432                    strncpy(net.ssid, &data->buf[counter], ssidLength);
    000007CE 66B3                   MOV         R11,R6
    000007D0 D217                   MOV.L       L606+18,R2 ; _strncpy
    000007D2 55E2                   MOV.L       @(8,R14),R5
    000007D4 420B                   JSR         @R2
    000007D6 6403                   MOV         R0,R4
           net.c   433                    counter += ssidLength + 1;
    000007D8 63F2                   MOV.L       @R15,R3
           net.c   434                    
           net.c   435                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    000007DA E500                   MOV         #0,R5
    000007DC 54E2                   MOV.L       @(8,R14),R4
    000007DE 3C3C                   ADD         R3,R12
    000007E0 66E2                   MOV.L       @R14,R6
    000007E2 36C8                   SUB         R12,R6
    000007E4 D30F                   MOV.L       L606+6,R3  ; _memchr
    000007E6 430B                   JSR         @R3
    000007E8 34CC                   ADD         R12,R4
    000007EA 2008                   TST         R0,R0
    000007EC 8B04                   BF          L598
           net.c   436                            free(net.ssid);
    000007EE D311                   MOV.L       L606+22,R3 ; _free
    000007F0 430B                   JSR         @R3
    000007F2 64D2                   MOV.L       @R13,R4
    000007F4 A007                   BRA         L487
    000007F6 0009                   NOP
    000007F8              L598:                             
           net.c   437                            return net;
           net.c   438                    }
           net.c   439                    
           net.c   440                    net.rssi = atoi(&data->buf[counter]);
    000007F8 54E2                   MOV.L       @(8,R14),R4
    000007FA D30F                   MOV.L       L606+26,R3 ; _atoi
    000007FC 430B                   JSR         @R3
    000007FE 34CC                   ADD         R12,R4
    00000800 1D01                   MOV.L       R0,@(4,R13)
           net.c   441            }
           net.c   442            
           net.c   443            freeData(data);
    00000802 BEA9                   BSR         _freeData
    00000804 64E3                   MOV         R14,R4
    00000806              L487:
    00000806 62D3                   MOV         R13,R2
    00000808 D30C                   MOV.L       L606+30,R3 ; __quick_odd_mvn
    0000080A 51F9                   MOV.L       @(36,R15),R1
    0000080C 430B                   JSR         @R3
    0000080E E00C                   MOV         #12,R0
           net.c   444            
           net.c   445            return net;
           net.c   446    }
    00000810 7F10                   ADD         #16,R15
    00000812 4F26                   LDS.L       @R15+,PR
    00000814 6BF6                   MOV.L       @R15+,R11
    00000816 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000818 6DF6                   MOV.L       @R15+,R13
    0000081A 000B                   RTS
    0000081C 6EF6                   MOV.L       @R15+,R14
    0000081E              L606:                             
    0000081E 01F4                   .DATA.W     H'01F4
    00000820 <00000000>             .DATA.L     L463
    00000824 <00000000>             .DATA.L     _memchr
    00000828 <00000000>             .DATA.L     _strlen
    0000082C <00000000>             .DATA.L     _malloc
    00000830 <00000000>             .DATA.L     _strncpy
    00000834 <00000000>             .DATA.L     _free
    00000838 <00000000>             .DATA.L     _atoi
    0000083C <00000000>             .DATA.L     __quick_odd_mvn
C   00000000              L365:
    00000000 44415441               .SDATA      "DATA"
    00000004 00                     .DATA.B     H'00
    00000005 00000001               .RES.B      1
    00000006 00000002               .RES.W      1
    00000008              L379:
    00000008 4445                   .SDATA      "DE"
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L381:
    0000000C 4F4B                   .SDATA      "OK"
    0000000E 00                     .DATA.B     H'00
    0000000F 00000001               .RES.B      1
    00000010              L387:
    00000010 4E45544441             .SDATA      "NETDATA"
             5441         
    00000017 00                     .DATA.B     H'00
    00000018              L388:
    00000018 2575                   .SDATA      "%u"
    0000001A 00                     .DATA.B     H'00
    0000001B 00000001               .RES.B      1
    0000001C              L434:
    0000001C 4745544E45             .SDATA      "GETNETS"
             5453         
    00000023 00                     .DATA.B     H'00
    00000024              L452:
    00000024 434F4E4E45             .SDATA      "CONNECT"
             4354         
    0000002B 00                     .DATA.B     H'00
    0000002C              L453:
    0000002C 2564                   .SDATA      "%d"
    0000002E 00                     .DATA.B     H'00
    0000002F 00000001               .RES.B      1
    00000030              L457:
    00000030 444953434F             .SDATA      "DISCONNECT"
             4E4E454354   
    0000003A 00                     .DATA.B     H'00
    0000003B 00000001               .RES.B      1
    0000003C              L463:
    0000003C 4745544E45             .SDATA      "GETNETINFO"
             54494E464F   
    00000046 00                     .DATA.B     H'00






SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2018 22:55:42  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        13




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      446



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000840 Byte(s)
CONSTANT SECTION (C):                               00000047 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000887 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          21
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           114






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Niko\AppData\Local\Temp\hmkC368.tmp 

