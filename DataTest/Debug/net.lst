SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\Documents\GTR\Wifi\DataTest\net.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c     1    #include "net.h"
           net.c     2    #include "stddef.h"
           net.c     3    #include "stdio.h"
           net.c     4    #include "stdlib.h"
           net.c     5    
           net.c     6    void openSerial() {
P   00000000              _openSerial:                     ; function: openSerial
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
           net.c     7        unsigned char mode[6];
           net.c     8        mode[0] = 0;
    00000002 E400                   MOV         #0,R4
           net.c     9        mode[1] = 9; // 115200 baud
           net.c    10        mode[2] = 0;
           net.c    11        mode[3] = 0;
           net.c    12        mode[4] = 0;
           net.c    13        mode[5] = 0;
           net.c    14    
           net.c    15        Serial_Open(mode);
    00000004 D346                   MOV.L       L631+6,R3  ; _Serial_Open
    00000006 E009                   MOV         #9,R0
    00000008 4F22                   STS.L       PR,@-R15
    0000000A 7FF8                   ADD         #-8,R15
    0000000C 6EF3                   MOV         R15,R14
    0000000E 2E40                   MOV.B       R4,@R14
    00000010 80E1                   MOV.B       R0,@(1,R14)
    00000012 6043                   MOV         R4,R0
    00000014 80E2                   MOV.B       R0,@(2,R14)
    00000016 80E3                   MOV.B       R0,@(3,R14)
    00000018 80E4                   MOV.B       R0,@(4,R14)
    0000001A 80E5                   MOV.B       R0,@(5,R14)
    0000001C 430B                   JSR         @R3
    0000001E 64E3                   MOV         R14,R4
           net.c    16    }
    00000020 7F08                   ADD         #8,R15
    00000022 4F26                   LDS.L       @R15+,PR
    00000024 000B                   RTS
    00000026 6EF6                   MOV.L       @R15+,R14
           net.c    17    
           net.c    18    void closeSerial() {
    00000028              _closeSerial:                    ; function: closeSerial
                                                           ; frame size=0
           net.c    19            Serial_Close(1);
    00000028 D33E                   MOV.L       L631+10,R3 ; _Serial_Close
    0000002A 432B                   JMP         @R3
    0000002C E401                   MOV         #1,R4
           net.c    20    }
           net.c    21    
           net.c    22    void sendCommand(unsigned char* command) {
    0000002E              _sendCommand:                    ; function: sendCommand
                                                           ; frame size=8
    0000002E 4F22                   STS.L       PR,@-R15
    00000030 2F46                   MOV.L       R4,@-R15
           net.c    23            Serial_BufferedTransmitOneByte((unsigned char) 219);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000032 9472                   MOV.W       L631,R4    ; H'00DB
    00000034 D33C                   MOV.L       L631+14,R3 ; _Serial_BufferedTransmitOneByte
    00000036 430B                   JSR         @R3
    00000038 0009                   NOP
           net.c    24            Serial_BufferedTransmitNBytes(command, strlen(command) + 1);
    0000003A D33C                   MOV.L       L631+18,R3 ; _strlen
    0000003C 430B                   JSR         @R3
    0000003E 64F2                   MOV.L       @R15,R4
    00000040 64F2                   MOV.L       @R15,R4
    00000042 6503                   MOV         R0,R5
    00000044 D33A                   MOV.L       L631+22,R3 ; _Serial_BufferedTransmitNBytes
    00000046 7F04                   ADD         #4,R15
    00000048 7501                   ADD         #1,R5
    0000004A 432B                   JMP         @R3
    0000004C 4F26                   LDS.L       @R15+,PR
           net.c    25    }
           net.c    26    
           net.c    27    void sendStatus(unsigned char* status) {
    0000004E              _sendStatus:                     ; function: sendStatus
                                                           ; frame size=8
    0000004E 4F22                   STS.L       PR,@-R15
    00000050 2F46                   MOV.L       R4,@-R15
           net.c    28            Serial_BufferedTransmitOneByte((unsigned char) 220);
    00000052 9463                   MOV.W       L631+2,R4  ; H'00DC
    00000054 D334                   MOV.L       L631+14,R3 ; _Serial_BufferedTransmitOneByte
    00000056 430B                   JSR         @R3
    00000058 0009                   NOP
           net.c    29            Serial_BufferedTransmitNBytes(status, strlen(status) + 1);
    0000005A D334                   MOV.L       L631+18,R3 ; _strlen
    0000005C 430B                   JSR         @R3
    0000005E 64F2                   MOV.L       @R15,R4
    00000060 64F2                   MOV.L       @R15,R4
    00000062 6503                   MOV         R0,R5
    00000064 D332                   MOV.L       L631+22,R3 ; _Serial_BufferedTransmitNBytes
    00000066 7F04                   ADD         #4,R15
    00000068 7501                   ADD         #1,R5
    0000006A 432B                   JMP         @R3
    0000006C 4F26                   LDS.L       @R15+,PR
           net.c    30    }
           net.c    31    
           net.c    32    int receiveString(unsigned char* buf, int maxLen) {
    0000006E              _receiveString:                  ; function: receiveString
                                                           ; frame size=0
           net.c    33            return receiveStringTimeout(buf, maxLen, 500);
    0000006E 9656                   MOV.W       L631+4,R6  ; H'01F4
    00000070 A000                   BRA         _receiveStringTimeout
    00000072 0009                   NOP
           net.c    34    }
           net.c    35    
           net.c    36    int receiveStringTimeout(unsigned char* buf, int maxLen, int timeout) { // Bei true ist nicht getimeouted
    00000074              _receiveStringTimeout:           ; function: receiveStringTimeout
                                                           ; frame size=44
    00000074 2FE6                   MOV.L       R14,@-R15
    00000076 2FD6                   MOV.L       R13,@-R15
    00000078 2FC6                   MOV.L       R12,@-R15
    0000007A 2FB6                   MOV.L       R11,@-R15
    0000007C 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000007E 2F96                   MOV.L       R9,@-R15
    00000080 2F86                   MOV.L       R8,@-R15
    00000082 6943                   MOV         R4,R9
           net.c    37            int startTicks = RTC_GetTicks();
    00000084 D32B                   MOV.L       L631+26,R3 ; _RTC_GetTicks
    00000086 4F22                   STS.L       PR,@-R15
    00000088 7FF4                   ADD         #-12,R15
    0000008A 1F52                   MOV.L       R5,@(8,R15)
    0000008C 430B                   JSR         @R3
    0000008E 1F61                   MOV.L       R6,@(4,R15)
    00000090 DB29                   MOV.L       L631+30,R11; _RTC_Elapsed_ms
    00000092 EE01                   MOV         #1,R14
    00000094 5AF2                   MOV.L       @(8,R15),R10
    00000096 6803                   MOV         R0,R8
           net.c    38            int numChars = 0;
    00000098 ED00                   MOV         #0,R13
           net.c    39            int ret = 0;
    0000009A 6CD3                   MOV         R13,R12
           net.c    40            
           net.c    41            while (!RTC_Elapsed_ms(startTicks, timeout)) {
    0000009C A013                   BRA         L544
    0000009E 7AFF                   ADD         #-1,R10
    000000A0              L545:                             
           net.c    42                    if (Serial_GetReceivedBytesAvailable() >= 1) {
    000000A0 D226                   MOV.L       L631+34,R2 ; _Serial_GetReceivedBytesAvailable
    000000A2 420B                   JSR         @R2
    000000A4 0009                   NOP
    000000A6 30E3                   CMP/GE      R14,R0
    000000A8 8B0D                   BF          L544
           net.c    43                            unsigned char c;
           net.c    44                            Serial_ReadOneByte(&c);
    000000AA D225                   MOV.L       L631+38,R2 ; _Serial_ReadOneByte
    000000AC 420B                   JSR         @R2
    000000AE 64F3                   MOV         R15,R4
           net.c    45                            
           net.c    46                            if (c == 0 || numChars >= maxLen - 1) {
    000000B0 63F0                   MOV.B       @R15,R3
    000000B2 2338                   TST         R3,R3
    000000B4 8901                   BT          L548
    000000B6 3DA3                   CMP/GE      R10,R13
    000000B8 8B01                   BF          L547
    000000BA              L548:                             
           net.c    47                                    ret = 1;
           net.c    48                                    break;
    000000BA A009                   BRA         L549
    000000BC 6CE3                   MOV         R14,R12
    000000BE              L547:                             
           net.c    49                            }
           net.c    50                            
           net.c    51                            buf[numChars++] = c;
    000000BE 60D3                   MOV         R13,R0
    000000C0 63F0                   MOV.B       @R15,R3
    000000C2 7D01                   ADD         #1,R13
    000000C4 0934                   MOV.B       R3,@(R0,R9)
    000000C6              L544:                             
    000000C6 55F1                   MOV.L       @(4,R15),R5
    000000C8 4B0B                   JSR         @R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000CA 6483                   MOV         R8,R4
    000000CC 2008                   TST         R0,R0
    000000CE 89E7                   BT          L545
    000000D0              L549:                             
           net.c    52                    }
           net.c    53            }
           net.c    54            
           net.c    55            buf[numChars] = 0;
    000000D0 60D3                   MOV         R13,R0
    000000D2 E300                   MOV         #0,R3
    000000D4 0934                   MOV.B       R3,@(R0,R9)
           net.c    56            return ret;
    000000D6 60C3                   MOV         R12,R0
           net.c    57    }
    000000D8 7F0C                   ADD         #12,R15
    000000DA 4F26                   LDS.L       @R15+,PR
    000000DC 68F6                   MOV.L       @R15+,R8
    000000DE 69F6                   MOV.L       @R15+,R9
    000000E0 6AF6                   MOV.L       @R15+,R10
    000000E2 6BF6                   MOV.L       @R15+,R11
    000000E4 6CF6                   MOV.L       @R15+,R12
    000000E6 6DF6                   MOV.L       @R15+,R13
    000000E8 000B                   RTS
    000000EA 6EF6                   MOV.L       @R15+,R14
           net.c    58    
           net.c    59    int receiveStatus() {
    000000EC              _receiveStatus:                  ; function: receiveStatus
                                                           ; frame size=0
           net.c    60            return receiveStatusTimeout(500);
    000000EC 9417                   MOV.W       L631+4,R4  ; H'01F4
    000000EE A000                   BRA         _receiveStatusTimeout
    000000F0 0009                   NOP
           net.c    61    }
           net.c    62    
           net.c    63    int receiveStatusTimeout(int timeout) {
    000000F2              _receiveStatusTimeout:           ; function: receiveStatusTimeout
                                                           ; frame size=48
    000000F2 2FE6                   MOV.L       R14,@-R15
    000000F4 2FD6                   MOV.L       R13,@-R15
    000000F6 2FC6                   MOV.L       R12,@-R15
    000000F8 2FB6                   MOV.L       R11,@-R15
    000000FA 2FA6                   MOV.L       R10,@-R15
    000000FC 2F96                   MOV.L       R9,@-R15
    000000FE 2F86                   MOV.L       R8,@-R15
    00000100 4F22                   STS.L       PR,@-R15
    00000102 7FF0                   ADD         #-16,R15
           net.c    64            int startTicks = RTC_GetTicks();
    00000104 D30B                   MOV.L       L631+26,R3 ; _RTC_GetTicks
    00000106 430B                   JSR         @R3
    00000108 6D43                   MOV         R4,R13
    0000010A 6903                   MOV         R0,R9
    0000010C D80D                   MOV.L       L631+42,R8 ; _convertStatus
    0000010E EC01                   MOV         #1,R12
    00000110 DA0A                   MOV.L       L631+34,R10; _Serial_GetReceivedBytesAvailable
    00000112 6EF3                   MOV         R15,R14
    00000114 9B02                   MOV.W       L631+2,R11 ; H'00DC
           net.c    65            unsigned char statusBuf[11];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c    66            
           net.c    67            while (!RTC_Elapsed_ms(startTicks, timeout)) {
    00000116 A02A                   BRA         L552
    00000118 7E04                   ADD         #4,R14
    0000011A              L631:                             
    0000011A 00DB                   .DATA.W     H'00DB
    0000011C 00DC                   .DATA.W     H'00DC
    0000011E 01F4                   .DATA.W     H'01F4
    00000120 <00000000>             .DATA.L     _Serial_Open
    00000124 <00000000>             .DATA.L     _Serial_Close
    00000128 <00000000>             .DATA.L     _Serial_BufferedTransmitOneByte
    0000012C <00000000>             .DATA.L     _strlen
    00000130 <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    00000134 <00000000>             .DATA.L     _RTC_GetTicks
    00000138 <00000000>             .DATA.L     _RTC_Elapsed_ms
    0000013C <00000000>             .DATA.L     _Serial_GetReceivedBytesAvailable
    00000140 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000144 <00000000>             .DATA.L     _convertStatus
    00000148              L553:                             
           net.c    68                    if (Serial_GetReceivedBytesAvailable() >= 1) {
    00000148 4A0B                   JSR         @R10
    0000014A 0009                   NOP
    0000014C 30C3                   CMP/GE      R12,R0
    0000014E 8B0E                   BF          L552
           net.c    69                            unsigned char c;
           net.c    70                            Serial_ReadOneByte(&c);
    00000150 D22B                   MOV.L       L632+4,R2  ; _Serial_ReadOneByte
    00000152 420B                   JSR         @R2
    00000154 64F3                   MOV         R15,R4
           net.c    71                            
           net.c    72                            if (c == 220) {
    00000156 63F0                   MOV.B       @R15,R3
    00000158 633C                   EXTU.B      R3,R3
    0000015A 33B0                   CMP/EQ      R11,R3
    0000015C 8B07                   BF          L552
           net.c    73                                    receiveStringTimeout(statusBuf, 11, timeout);
    0000015E 66D3                   MOV         R13,R6
    00000160 E50B                   MOV         #11,R5
    00000162 BF87                   BSR         _receiveStringTimeout
    00000164 64E3                   MOV         R14,R4
           net.c    74                                    return convertStatus(statusBuf);
    00000166 480B                   JSR         @R8
    00000168 64E3                   MOV         R14,R4
    0000016A A007                   BRA         L556
    0000016C 0009                   NOP
    0000016E              L552:                             
    0000016E 65D3                   MOV         R13,R5
    00000170 D324                   MOV.L       L632+8,R3  ; _RTC_Elapsed_ms
    00000172 430B                   JSR         @R3
    00000174 6493                   MOV         R9,R4
    00000176 2008                   TST         R0,R0
    00000178 89E6                   BT          L553
           net.c    75                            }
           net.c    76                    }
           net.c    77            }
           net.c    78            
           net.c    79            return -1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000017A E0FF                   MOV         #-1,R0
           net.c    80    }
    0000017C              L556:                             
    0000017C 7F10                   ADD         #16,R15
    0000017E 4F26                   LDS.L       @R15+,PR
    00000180 68F6                   MOV.L       @R15+,R8
    00000182 69F6                   MOV.L       @R15+,R9
    00000184 6AF6                   MOV.L       @R15+,R10
    00000186 6BF6                   MOV.L       @R15+,R11
    00000188 6CF6                   MOV.L       @R15+,R12
    0000018A 6DF6                   MOV.L       @R15+,R13
    0000018C 000B                   RTS
    0000018E 6EF6                   MOV.L       @R15+,R14
           net.c    81    
           net.c    82    unsigned int calculateChecksum(unsigned char* buf, int len) {
    00000190              _calculateChecksum:              ; function: calculateChecksum
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __modlu
    00000190 2FE6                   MOV.L       R14,@-R15
           net.c    83            unsigned int checksum = 0;
    00000192 E600                   MOV         #0,R6
    00000194 4F22                   STS.L       PR,@-R15
    00000196 EE00                   MOV         #0,R14
    00000198 3E4C                   ADD         R4,R14
           net.c    84            int counter;
           net.c    85            
           net.c    86            for (counter = 0; counter < len; counter++) {
    0000019A 4515                   CMP/PL      R5
    0000019C 942E                   MOV.W       L632,R4    ; H'2710
    0000019E 8F0D                   BF/S        L557
    000001A0 6763                   MOV         R6,R7
    000001A2              L558:                             
           net.c    87                    checksum += buf[counter];
    000001A2 63E4                   MOV.B       @R14+,R3
    000001A4 633C                   EXTU.B      R3,R3
    000001A6 363C                   ADD         R3,R6
           net.c    88                    
           net.c    89                    if (checksum > 10000) {
    000001A8 3646                   CMP/HI      R4,R6
    000001AA 8B04                   BF          L559
           net.c    90                            checksum = checksum % 10000;
    000001AC D316                   MOV.L       L632+12,R3 ; __modlu
    000001AE 6163                   MOV         R6,R1
    000001B0 430B                   JSR         @R3
    000001B2 6043                   MOV         R4,R0
    000001B4 6603                   MOV         R0,R6
    000001B6              L559:                             
    000001B6 7701                   ADD         #1,R7
    000001B8 3753                   CMP/GE      R5,R7
    000001BA 8BF2                   BF          L558
    000001BC              L557:                             
           net.c    91                    }
           net.c    92            }
           net.c    93            
           net.c    94            return checksum;
           net.c    95    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001BC 4F26                   LDS.L       @R15+,PR
    000001BE 6063                   MOV         R6,R0
    000001C0 000B                   RTS
    000001C2 6EF6                   MOV.L       @R15+,R14
           net.c    96    
           net.c    97    Data* receiveData(int retryCount) {
    000001C4              _receiveData:                    ; function: receiveData
                                                           ; frame size=4
    000001C4 7FFC                   ADD         #-4,R15
           net.c    98            return receiveDataTimeout(500, retryCount);
    000001C6 6543                   MOV         R4,R5
    000001C8 2F42                   MOV.L       R4,@R15
    000001CA 9418                   MOV.W       L632+2,R4  ; H'01F4
    000001CC A000                   BRA         _receiveDataTimeout
    000001CE 7F04                   ADD         #4,R15
           net.c    99    }
           net.c   100    
           net.c   101    Data* receiveDataTimeout(int timeout, int retryCount) {
    000001D0              _receiveDataTimeout:             ; function: receiveDataTimeout
                                                           ; frame size=60
    000001D0 2FE6                   MOV.L       R14,@-R15
    000001D2 2FD6                   MOV.L       R13,@-R15
    000001D4 2FC6                   MOV.L       R12,@-R15
    000001D6 2FB6                   MOV.L       R11,@-R15
    000001D8 2FA6                   MOV.L       R10,@-R15
    000001DA 6B43                   MOV         R4,R11
           net.c   102            int startTicks = RTC_GetTicks();
    000001DC D30B                   MOV.L       L632+16,R3 ; _RTC_GetTicks
    000001DE 2F96                   MOV.L       R9,@-R15
    000001E0 2F86                   MOV.L       R8,@-R15
    000001E2 4F22                   STS.L       PR,@-R15
    000001E4 7FE4                   ADD         #-28,R15
    000001E6 430B                   JSR         @R3
    000001E8 1F52                   MOV.L       R5,@(8,R15)
           net.c   103            Data* data = NULL;
    000001EA EC00                   MOV         #0,R12
    000001EC 1F03                   MOV.L       R0,@(12,R15)
    000001EE 6EC3                   MOV         R12,R14
           net.c   104            unsigned char buf[11];
           net.c   105            int retry = 0;
           net.c   106            
           net.c   107            if (retryCount < 0) {
    000001F0 53F2                   MOV.L       @(8,R15),R3
    000001F2 4311                   CMP/PZ      R3
    000001F4 8D62                   BT/S        L564
    000001F6 68C3                   MOV         R12,R8
           net.c   108                    return NULL;
    000001F8 A08A                   BRA         L563
    000001FA E000                   MOV         #0,R0
    000001FC              L632:                             
    000001FC 2710                   .DATA.W     H'2710
    000001FE 01F4                   .DATA.W     H'01F4
    00000200 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000204 <00000000>             .DATA.L     _RTC_Elapsed_ms
    00000208 <00000000>             .DATA.L     __modlu
    0000020C <00000000>             .DATA.L     _RTC_GetTicks
    00000210              L565:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   109            }
           net.c   110            
           net.c   111            while (!RTC_Elapsed_ms(startTicks, timeout)) {
           net.c   112                    unsigned char c;
           net.c   113                    
           net.c   114                    if (Serial_ReadOneByte(&c) == 0 && c == 221) {
    00000210 DD35                   MOV.L       L633+4,R13 ; _Serial_ReadOneByte
    00000212 64F3                   MOV         R15,R4
    00000214 4D0B                   JSR         @R13
    00000216 7404                   ADD         #4,R4
    00000218 2008                   TST         R0,R0
    0000021A 8B4F                   BF          L564
    0000021C 84F4                   MOV.B       @(4,R15),R0
    0000021E 600C                   EXTU.B      R0,R0
    00000220 9360                   MOV.W       L633,R3    ; H'00DD
    00000222 3030                   CMP/EQ      R3,R0
    00000224 8B4A                   BF          L564
           net.c   115                            receiveStringTimeout(buf, 11, timeout);
    00000226 6DF3                   MOV         R15,R13
    00000228 7D10                   ADD         #16,R13
    0000022A 66B3                   MOV         R11,R6
    0000022C E50B                   MOV         #11,R5
    0000022E BF21                   BSR         _receiveStringTimeout
    00000230 64D3                   MOV         R13,R4
           net.c   116                            if (strcmp(buf, "DATA", 4) == 0) {
    00000232 E604                   MOV         #4,R6
    00000234 D22E                   MOV.L       L633+12,R2 ; _strcmp
    00000236 DA2D                   MOV.L       L633+8,R10 ; L385
    00000238 65A3                   MOV         R10,R5
    0000023A 420B                   JSR         @R2
    0000023C 64D3                   MOV         R13,R4
    0000023E 2008                   TST         R0,R0
    00000240 8B3C                   BF          L564
           net.c   117                                    unsigned int counter = 0;
    00000242 6AC3                   MOV         R12,R10
           net.c   118                                    short received;
           net.c   119                                    data = (Data*) malloc(sizeof(Data));
    00000244 D22B                   MOV.L       L633+16,R2 ; _malloc
    00000246 420B                   JSR         @R2
    00000248 E40C                   MOV         #12,R4
    0000024A 6E03                   MOV         R0,R14
           net.c   120                                    data->buf = NULL;
    0000024C 1EA2                   MOV.L       R10,@(8,R14)
           net.c   121                                    
           net.c   122                                    if (!receiveStringTimeout(buf, 11, timeout)) {
    0000024E 66B3                   MOV         R11,R6
    00000250 E50B                   MOV         #11,R5
    00000252 BF0F                   BSR         _receiveStringTimeout
    00000254 64D3                   MOV         R13,R4
    00000256 2008                   TST         R0,R0
    00000258 8909                   BT          L497
           net.c   123                                            retry = 1;
           net.c   124                                            break;
           net.c   125                                    }
           net.c   126                                    data->length = (unsigned int) atol(buf);
    0000025A D327                   MOV.L       L633+20,R3 ; _atol
    0000025C 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000025E 64D3                   MOV         R13,R4
    00000260 2E02                   MOV.L       R0,@R14
           net.c   127                                    
           net.c   128                                    if (!receiveStringTimeout(buf, 11, timeout)) {
    00000262 66B3                   MOV         R11,R6
    00000264 E50B                   MOV         #11,R5
    00000266 BF05                   BSR         _receiveStringTimeout
    00000268 64D3                   MOV         R13,R4
    0000026A 2008                   TST         R0,R0
    0000026C 8B01                   BF          L570
    0000026E              L497:
           net.c   129                                            retry = 1;
           net.c   130                                            break;
    0000026E A02B                   BRA         L569
    00000270 E801                   MOV         #1,R8
    00000272              L570:                             
           net.c   131                                    }
           net.c   132                                    data->checksum = (unsigned int) atol(buf);
    00000272 D321                   MOV.L       L633+20,R3 ; _atol
    00000274 430B                   JSR         @R3
    00000276 64D3                   MOV         R13,R4
    00000278 1E01                   MOV.L       R0,@(4,R14)
           net.c   133                                    
           net.c   134                                    data->buf = (unsigned char*) malloc(data->length);
    0000027A D21E                   MOV.L       L633+16,R2 ; _malloc
    0000027C 420B                   JSR         @R2
    0000027E 64E2                   MOV.L       @R14,R4
    00000280 1E02                   MOV.L       R0,@(8,R14)
           net.c   135                                    while (1) {
    00000282              L572:                             
           net.c   136                                            Serial_ReadNBytes(&data->buf[counter], data->length - counter, &re
                         +ceived);
    00000282 66F3                   MOV         R15,R6
    00000284 65E2                   MOV.L       @R14,R5
    00000286 DD1D                   MOV.L       L633+24,R13; _Serial_ReadNBytes
    00000288 54E2                   MOV.L       @(8,R14),R4
    0000028A 35A8                   SUB         R10,R5
    0000028C 4D0B                   JSR         @R13
    0000028E 34AC                   ADD         R10,R4
           net.c   137                                            counter += received;
    00000290 62F1                   MOV.W       @R15,R2
    00000292 3A2C                   ADD         R2,R10
           net.c   138                                            
           net.c   139                                            if (counter >= data->length) {
    00000294 63E2                   MOV.L       @R14,R3
    00000296 3A32                   CMP/HS      R3,R10
    00000298 8B07                   BF          L573
           net.c   140                                                    if (data->checksum != calculateChecksum(data->buf, data->l
                         +ength)) {
    0000029A 65E2                   MOV.L       @R14,R5
    0000029C BF78                   BSR         _calculateChecksum
    0000029E 54E2                   MOV.L       @(8,R14),R4
    000002A0 52E1                   MOV.L       @(4,R14),R2
    000002A2 3200                   CMP/EQ      R0,R2
    000002A4 8910                   BT          L569
           net.c   141                                                            retry = 1;
           net.c   142                                                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   143                                                    
           net.c   144                                                    break;
    000002A6 A00F                   BRA         L569
    000002A8 E801                   MOV         #1,R8
    000002AA              L573:                             
           net.c   145                                            }
           net.c   146    
           net.c   147                                            if (RTC_Elapsed_ms(startTicks, timeout)) {
    000002AA 65B3                   MOV         R11,R5
    000002AC 490B                   JSR         @R9
    000002AE 54F3                   MOV.L       @(12,R15),R4
    000002B0 2008                   TST         R0,R0
    000002B2 89E6                   BT          L572
           net.c   148                                                    freeData(data);
    000002B4 B150                   BSR         _freeData
    000002B6 64E3                   MOV         R14,R4
           net.c   149                                                    data = NULL;
           net.c   150                                                    break;
    000002B8 A006                   BRA         L569
    000002BA 6EC3                   MOV         R12,R14
    000002BC              L564:                             
    000002BC D910                   MOV.L       L633+28,R9 ; _RTC_Elapsed_ms
    000002BE 65B3                   MOV         R11,R5
    000002C0 490B                   JSR         @R9
    000002C2 54F3                   MOV.L       @(12,R15),R4
    000002C4 2008                   TST         R0,R0
    000002C6 89A3                   BT          L565
    000002C8              L569:                             
           net.c   151                                            }
           net.c   152                                    }
           net.c   153    
           net.c   154                                    break;
           net.c   155                            }
           net.c   156                    }
           net.c   157            }
           net.c   158            
           net.c   159            if (retry == 1) {
    000002C8 6083                   MOV         R8,R0
    000002CA 8801                   CMP/EQ      #1,R0
    000002CC 8B1C                   BF          L577
           net.c   160                    freeData(data);
    000002CE B143                   BSR         _freeData
    000002D0 64E3                   MOV         R14,R4
           net.c   161                    data = NULL;
           net.c   162                    sendStatus("DE");
    000002D2 D40C                   MOV.L       L633+32,R4 ; L396
    000002D4 BEBB                   BSR         _sendStatus
    000002D6 0009                   NOP
           net.c   163                    data = receiveDataTimeout(timeout, retryCount - 1);
    000002D8 55F2                   MOV.L       @(8,R15),R5
    000002DA 75FF                   ADD         #-1,R5
    000002DC BF78                   BSR         _receiveDataTimeout
    000002DE 64B3                   MOV         R11,R4
    000002E0 A015                   BRA         L578
    000002E2 6E03                   MOV         R0,R14
    000002E4              L633:                             
    000002E4 00DD                   .DATA.W     H'00DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002E6 0000                   .DATA.W     0
    000002E8 <00000000>             .DATA.L     _Serial_ReadOneByte
    000002EC <00000000>             .DATA.L     L385
    000002F0 <00000000>             .DATA.L     _strcmp
    000002F4 <00000000>             .DATA.L     _malloc
    000002F8 <00000000>             .DATA.L     _atol
    000002FC <00000000>             .DATA.L     _Serial_ReadNBytes
    00000300 <00000000>             .DATA.L     _RTC_Elapsed_ms
    00000304 <00000000>             .DATA.L     L396
    00000308              L577:                             
           net.c   164            } else {
           net.c   165                    sendStatus("OK");
    00000308 D441                   MOV.L       L634+6,R4  ; L398
    0000030A BEA0                   BSR         _sendStatus
    0000030C 0009                   NOP
    0000030E              L578:                             
           net.c   166            }
           net.c   167            
           net.c   168            return data;
    0000030E 60E3                   MOV         R14,R0
           net.c   169    }
    00000310              L563:                             
    00000310 7F1C                   ADD         #28,R15
    00000312 4F26                   LDS.L       @R15+,PR
    00000314 68F6                   MOV.L       @R15+,R8
    00000316 69F6                   MOV.L       @R15+,R9
    00000318 6AF6                   MOV.L       @R15+,R10
    0000031A 6BF6                   MOV.L       @R15+,R11
    0000031C 6CF6                   MOV.L       @R15+,R12
    0000031E 6DF6                   MOV.L       @R15+,R13
    00000320 000B                   RTS
    00000322 6EF6                   MOV.L       @R15+,R14
           net.c   170    
           net.c   171    void sendNetData(unsigned char* buf, unsigned int length) {
    00000324              _sendNetData:                    ; function: sendNetData
                                                           ; frame size=60
    00000324 2FE6                   MOV.L       R14,@-R15
    00000326 2FD6                   MOV.L       R13,@-R15
    00000328 2FC6                   MOV.L       R12,@-R15
    0000032A 2FB6                   MOV.L       R11,@-R15
    0000032C 2FA6                   MOV.L       R10,@-R15
    0000032E 6B53                   MOV         R5,R11
           net.c   172            unsigned char text[11];
           net.c   173            unsigned int counter = 0;
           net.c   174            
           net.c   175            Serial_BufferedTransmitOneByte((unsigned char) 221);
    00000330 D338                   MOV.L       L634+10,R3 ; _Serial_BufferedTransmitOneByte
    00000332 2F96                   MOV.L       R9,@-R15
    00000334 2F86                   MOV.L       R8,@-R15
    00000336 6843                   MOV         R4,R8
    00000338 4F22                   STS.L       PR,@-R15
    0000033A 7FF4                   ADD         #-12,R15
    0000033C 9465                   MOV.W       L634,R4    ; H'00DD
    0000033E 430B                   JSR         @R3
    00000340 ED00                   MOV         #0,R13
           net.c   176            Serial_BufferedTransmitNBytes("NETDATA", strlen("NETDATA") + 1);
    00000342 DA35                   MOV.L       L634+14,R10; _strlen




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000344 DC35                   MOV.L       L634+18,R12; _Serial_BufferedTransmitNBytes
    00000346 D436                   MOV.L       L634+22,R4 ; L404
    00000348 4A0B                   JSR         @R10
    0000034A 0009                   NOP
    0000034C D434                   MOV.L       L634+22,R4 ; L404
    0000034E 6503                   MOV         R0,R5
    00000350 4C0B                   JSR         @R12
    00000352 7501                   ADD         #1,R5
           net.c   177            
           net.c   178            sprintf(text, "%u", length);
    00000354 D233                   MOV.L       L634+26,R2 ; L405
    00000356 6EF3                   MOV         R15,R14
    00000358 D333                   MOV.L       L634+30,R3 ; _sprintf
    0000035A 2FB6                   MOV.L       R11,@-R15
    0000035C 2F26                   MOV.L       R2,@-R15
    0000035E 430B                   JSR         @R3
    00000360 64E3                   MOV         R14,R4
           net.c   179            Serial_BufferedTransmitNBytes(text, strlen(text) + 1);
    00000362 4A0B                   JSR         @R10
    00000364 64E3                   MOV         R14,R4
    00000366 6503                   MOV         R0,R5
    00000368 7501                   ADD         #1,R5
    0000036A 4C0B                   JSR         @R12
    0000036C 64E3                   MOV         R14,R4
           net.c   180            
           net.c   181            sprintf(text, "%u", calculateChecksum(buf, length));
    0000036E 65B3                   MOV         R11,R5
    00000370 BF0E                   BSR         _calculateChecksum
    00000372 6483                   MOV         R8,R4
    00000374 2F06                   MOV.L       R0,@-R15
    00000376 D32B                   MOV.L       L634+26,R3 ; L405
    00000378 D22B                   MOV.L       L634+30,R2 ; _sprintf
    0000037A 2F36                   MOV.L       R3,@-R15
    0000037C 420B                   JSR         @R2
    0000037E 64E3                   MOV         R14,R4
    00000380 7F10                   ADD         #16,R15
           net.c   182            Serial_BufferedTransmitNBytes(text, strlen(text) + 1);
    00000382 4A0B                   JSR         @R10
    00000384 64E3                   MOV         R14,R4
    00000386 6503                   MOV         R0,R5
    00000388 7501                   ADD         #1,R5
    0000038A 4C0B                   JSR         @R12
    0000038C 64E3                   MOV         R14,R4
           net.c   183            
           net.c   184            GetAppName(text);
    0000038E D327                   MOV.L       L634+34,R3 ; _GetAppName
    00000390 430B                   JSR         @R3
    00000392 64E3                   MOV         R14,R4
           net.c   185            Serial_BufferedTransmitNBytes(text, strlen(text) + 1);
    00000394 4A0B                   JSR         @R10
    00000396 64E3                   MOV         R14,R4
    00000398 6503                   MOV         R0,R5
    0000039A 7501                   ADD         #1,R5
    0000039C 4C0B                   JSR         @R12
    0000039E 64E3                   MOV         R14,R4
    000003A0 9A34                   MOV.W       L634+2,R10 ; H'0100
           net.c   186            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   187            while (counter < length) {
    000003A2 A012                   BRA         L579
    000003A4 0009                   NOP
    000003A6              L580:                             
           net.c   188                    int bytes = length - counter;
    000003A6 6EB3                   MOV         R11,R14
    000003A8 3ED8                   SUB         R13,R14
           net.c   189                    
           net.c   190                    if (bytes > 256) {
    000003AA 3EA7                   CMP/GT      R10,R14
    000003AC 8F01                   BF/S        L581
    000003AE 6983                   MOV         R8,R9
           net.c   191                            bytes = 256;
    000003B0 6EA3                   MOV         R10,R14
    000003B2              L581:                             
           net.c   192                    }
           net.c   193                    
           net.c   194                    while (Serial_BufferedTransmitNBytes(&buf[counter], bytes) == 2) {
    000003B2 A004                   BRA         L582
    000003B4 39DC                   ADD         R13,R9
    000003B6              L583:                             
           net.c   195                            bytes = bytes / 2;
    000003B6 E300                   MOV         #0,R3
    000003B8 33E7                   CMP/GT      R14,R3
    000003BA 3E3E                   ADDC        R3,R14
    000003BC 4E21                   SHAR        R14
    000003BE              L582:                             
    000003BE 65E3                   MOV         R14,R5
    000003C0 4C0B                   JSR         @R12
    000003C2 6493                   MOV         R9,R4
    000003C4 8802                   CMP/EQ      #2,R0
    000003C6 89F6                   BT          L583
           net.c   196                    }
           net.c   197                    
           net.c   198                    counter += bytes;
    000003C8 3DEC                   ADD         R14,R13
    000003CA              L579:                             
    000003CA 3DB2                   CMP/HS      R11,R13
    000003CC 8BEB                   BF          L580
           net.c   199            }
           net.c   200    }
    000003CE 7F0C                   ADD         #12,R15
    000003D0 4F26                   LDS.L       @R15+,PR
    000003D2 68F6                   MOV.L       @R15+,R8
    000003D4 69F6                   MOV.L       @R15+,R9
    000003D6 6AF6                   MOV.L       @R15+,R10
    000003D8 6BF6                   MOV.L       @R15+,R11
    000003DA 6CF6                   MOV.L       @R15+,R12
    000003DC 6DF6                   MOV.L       @R15+,R13
    000003DE 000B                   RTS
    000003E0 6EF6                   MOV.L       @R15+,R14
           net.c   201    
           net.c   202    NetData* receiveNetData() {
    000003E2              _receiveNetData:                 ; function: receiveNetData
                                                           ; frame size=0
           net.c   203            return receiveNetDataTimeout(500);
    000003E2 9414                   MOV.W       L634+4,R4  ; H'01F4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003E4 A000                   BRA         _receiveNetDataTimeout
    000003E6 0009                   NOP
           net.c   204    }
           net.c   205    
           net.c   206    NetData* receiveNetDataTimeout(int timeout) {
    000003E8              _receiveNetDataTimeout:          ; function: receiveNetDataTimeout
                                                           ; frame size=60
    000003E8 2FE6                   MOV.L       R14,@-R15
    000003EA 2FD6                   MOV.L       R13,@-R15
    000003EC 2FC6                   MOV.L       R12,@-R15
    000003EE 2FB6                   MOV.L       R11,@-R15
    000003F0 2FA6                   MOV.L       R10,@-R15
    000003F2 EB00                   MOV         #0,R11
           net.c   207            int startTicks = RTC_GetTicks();
    000003F4 D30E                   MOV.L       L634+38,R3 ; _RTC_GetTicks
    000003F6 2F96                   MOV.L       R9,@-R15
    000003F8 2F86                   MOV.L       R8,@-R15
    000003FA 4F22                   STS.L       PR,@-R15
    000003FC 7FE4                   ADD         #-28,R15
    000003FE 430B                   JSR         @R3
    00000400 1F42                   MOV.L       R4,@(8,R15)
           net.c   208            NetData* data = NULL;
    00000402 6EB3                   MOV         R11,R14
    00000404 1F03                   MOV.L       R0,@(12,R15)
           net.c   209            unsigned char buf[11];
           net.c   210            int retry = 0;
           net.c   211            
           net.c   212            while (!RTC_Elapsed_ms(startTicks, timeout)) {
    00000406 A07B                   BRA         L585
    00000408 68B3                   MOV         R11,R8
    0000040A              L634:                             
    0000040A 00DD                   .DATA.W     H'00DD
    0000040C 0100                   .DATA.W     H'0100
    0000040E 01F4                   .DATA.W     H'01F4
    00000410 <00000000>             .DATA.L     L398
    00000414 <00000000>             .DATA.L     _Serial_BufferedTransmitOneByte
    00000418 <00000000>             .DATA.L     _strlen
    0000041C <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    00000420 <00000000>             .DATA.L     L404
    00000424 <00000000>             .DATA.L     L405
    00000428 <00000000>             .DATA.L     _sprintf
    0000042C <00000000>             .DATA.L     _GetAppName
    00000430 <00000000>             .DATA.L     _RTC_GetTicks
    00000434              L586:                             
           net.c   213                    unsigned char c;
           net.c   214                    
           net.c   215                    if (Serial_ReadOneByte(&c) == 0 && c == 221) {
    00000434 DD3F                   MOV.L       L635+6,R13 ; _Serial_ReadOneByte
    00000436 64F3                   MOV         R15,R4
    00000438 4D0B                   JSR         @R13
    0000043A 7404                   ADD         #4,R4
    0000043C 2008                   TST         R0,R0
    0000043E 8B5F                   BF          L585
    00000440 84F4                   MOV.B       @(4,R15),R0
    00000442 600C                   EXTU.B      R0,R0
    00000444 9373                   MOV.W       L635,R3    ; H'00DD
    00000446 3030                   CMP/EQ      R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000448 8B5A                   BF          L585
           net.c   216                            receiveStringTimeout(buf, 11, 1000);
    0000044A 6DF3                   MOV         R15,R13
    0000044C 9C70                   MOV.W       L635+2,R12 ; H'03E8
    0000044E E50B                   MOV         #11,R5
    00000450 7D10                   ADD         #16,R13
    00000452 66C3                   MOV         R12,R6
    00000454 BE0E                   BSR         _receiveStringTimeout
    00000456 64D3                   MOV         R13,R4
           net.c   217                            if (strcmp(buf, "NETDATA", 7) == 0) {
    00000458 DA37                   MOV.L       L635+10,R10; _strcmp
    0000045A E607                   MOV         #7,R6
    0000045C D537                   MOV.L       L635+14,R5 ; L404
    0000045E 4A0B                   JSR         @R10
    00000460 64D3                   MOV         R13,R4
    00000462 2008                   TST         R0,R0
    00000464 8B4C                   BF          L585
           net.c   218                                    int counter = 0;
    00000466 6AB3                   MOV         R11,R10
           net.c   219                                    short received;
           net.c   220                                    data = (NetData*) malloc(sizeof(NetData));
    00000468 D335                   MOV.L       L635+18,R3 ; _malloc
    0000046A 430B                   JSR         @R3
    0000046C E418                   MOV         #24,R4
    0000046E 6E03                   MOV         R0,R14
           net.c   221                                    data->buf = NULL;
    00000470 1EA5                   MOV.L       R10,@(20,R14)
           net.c   222                                    
           net.c   223                                    if (!receiveStringTimeout(buf, 11, 1000)) {
    00000472 66C3                   MOV         R12,R6
    00000474 E50B                   MOV         #11,R5
    00000476 BDFD                   BSR         _receiveStringTimeout
    00000478 64D3                   MOV         R13,R4
    0000047A 2008                   TST         R0,R0
    0000047C 8913                   BT          L500
           net.c   224                                            retry = 1;
           net.c   225                                            break;
           net.c   226                                    }
           net.c   227                                    data->length = (unsigned int) atol(buf);
    0000047E D331                   MOV.L       L635+22,R3 ; _atol
    00000480 430B                   JSR         @R3
    00000482 64D3                   MOV         R13,R4
    00000484 2E02                   MOV.L       R0,@R14
           net.c   228                                    
           net.c   229                                    if (!receiveStringTimeout(buf, 11, 1000)) {
    00000486 66C3                   MOV         R12,R6
    00000488 E50B                   MOV         #11,R5
    0000048A BDF3                   BSR         _receiveStringTimeout
    0000048C 64D3                   MOV         R13,R4
    0000048E 2008                   TST         R0,R0
    00000490 8909                   BT          L500
           net.c   230                                            retry = 1;
           net.c   231                                            break;
           net.c   232                                    }
           net.c   233                                    data->checksum = (unsigned int) atol(buf);
    00000492 D22C                   MOV.L       L635+22,R2 ; _atol
    00000494 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000496 64D3                   MOV         R13,R4
    00000498 1E01                   MOV.L       R0,@(4,R14)
           net.c   234                                    
           net.c   235                                    if (!receiveStringTimeout(buf, 11, 1000)) {
    0000049A 66C3                   MOV         R12,R6
    0000049C E50B                   MOV         #11,R5
    0000049E BDE9                   BSR         _receiveStringTimeout
    000004A0 64D3                   MOV         R13,R4
    000004A2 2008                   TST         R0,R0
    000004A4 8B01                   BF          L592
    000004A6              L500:
           net.c   236                                            retry = 1;
           net.c   237                                            break;
    000004A6 A031                   BRA         L590
    000004A8 E801                   MOV         #1,R8
    000004AA              L592:                             
           net.c   238                                    }
           net.c   239                                    memcpy(data->appName, buf, 9);
    000004AA E609                   MOV         #9,R6
    000004AC D226                   MOV.L       L635+26,R2 ; _memcpy
    000004AE 65D3                   MOV         R13,R5
    000004B0 64E3                   MOV         R14,R4
    000004B2 420B                   JSR         @R2
    000004B4 7408                   ADD         #8,R4
           net.c   240                                    
           net.c   241                                    startTicks = RTC_GetTicks();
    000004B6 D325                   MOV.L       L635+30,R3 ; _RTC_GetTicks
    000004B8 430B                   JSR         @R3
    000004BA 0009                   NOP
           net.c   242                                    data->buf = (unsigned char*) malloc(data->length);
    000004BC D220                   MOV.L       L635+18,R2 ; _malloc
    000004BE 6D03                   MOV         R0,R13
    000004C0 420B                   JSR         @R2
    000004C2 64E2                   MOV.L       @R14,R4
    000004C4 1E05                   MOV.L       R0,@(20,R14)
           net.c   243                                    while (1) {
    000004C6              L594:                             
           net.c   244                                            Serial_ReadNBytes(&data->buf[counter], data->length - counter, &re
                         +ceived);
    000004C6 66F3                   MOV         R15,R6
    000004C8 65E2                   MOV.L       @R14,R5
    000004CA 35A8                   SUB         R10,R5
    000004CC 54E5                   MOV.L       @(20,R14),R4
    000004CE D220                   MOV.L       L635+34,R2 ; _Serial_ReadNBytes
    000004D0 420B                   JSR         @R2
    000004D2 34AC                   ADD         R10,R4
           net.c   245                                            counter += received;
    000004D4 63F1                   MOV.W       @R15,R3
    000004D6 3A3C                   ADD         R3,R10
           net.c   246                                            
           net.c   247                                            if (counter >= data->length) {
    000004D8 63E2                   MOV.L       @R14,R3
    000004DA 3A32                   CMP/HS      R3,R10
    000004DC 8B07                   BF          L595
           net.c   248                                                    if (data->checksum != calculateChecksum(data->buf, data->l
                         +ength)) {
    000004DE 65E2                   MOV.L       @R14,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004E0 BE56                   BSR         _calculateChecksum
    000004E2 54E5                   MOV.L       @(20,R14),R4
    000004E4 52E1                   MOV.L       @(4,R14),R2
    000004E6 3200                   CMP/EQ      R0,R2
    000004E8 8910                   BT          L590
           net.c   249                                                            retry = 1;
           net.c   250                                                    }
           net.c   251                                                    
           net.c   252                                                    break;
    000004EA A00F                   BRA         L590
    000004EC E801                   MOV         #1,R8
    000004EE              L595:                             
           net.c   253                                            }
           net.c   254    
           net.c   255                                            if (RTC_Elapsed_ms(startTicks, 1000)) {
    000004EE 65C3                   MOV         R12,R5
    000004F0 490B                   JSR         @R9
    000004F2 64D3                   MOV         R13,R4
    000004F4 2008                   TST         R0,R0
    000004F6 89E6                   BT          L594
           net.c   256                                                    freeNetData(data);
    000004F8 B043                   BSR         _freeNetData
    000004FA 64E3                   MOV         R14,R4
           net.c   257                                                    data = NULL;
           net.c   258                                                    break;
    000004FC A006                   BRA         L590
    000004FE 6EB3                   MOV         R11,R14
    00000500              L585:                             
    00000500 D914                   MOV.L       L635+38,R9 ; _RTC_Elapsed_ms
    00000502 55F2                   MOV.L       @(8,R15),R5
    00000504 490B                   JSR         @R9
    00000506 54F3                   MOV.L       @(12,R15),R4
    00000508 2008                   TST         R0,R0
    0000050A 8993                   BT          L586
    0000050C              L590:                             
           net.c   259                                            }
           net.c   260                                    }
           net.c   261    
           net.c   262                                    break;
           net.c   263                            }
           net.c   264                    }
           net.c   265            }
           net.c   266            
           net.c   267            if (retry == 1) {
    0000050C 6083                   MOV         R8,R0
    0000050E 8801                   CMP/EQ      #1,R0
    00000510 8B02                   BF          L599
           net.c   268                    freeNetData(data);
    00000512 B036                   BSR         _freeNetData
    00000514 64E3                   MOV         R14,R4
           net.c   269                    data = NULL;
    00000516 6EB3                   MOV         R11,R14
    00000518              L599:                             
           net.c   270            }
           net.c   271            
           net.c   272            return data;
    00000518 60E3                   MOV         R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   273    }
    0000051A 7F1C                   ADD         #28,R15
    0000051C 4F26                   LDS.L       @R15+,PR
    0000051E 68F6                   MOV.L       @R15+,R8
    00000520 69F6                   MOV.L       @R15+,R9
    00000522 6AF6                   MOV.L       @R15+,R10
    00000524 6BF6                   MOV.L       @R15+,R11
    00000526 6CF6                   MOV.L       @R15+,R12
    00000528 6DF6                   MOV.L       @R15+,R13
    0000052A 000B                   RTS
    0000052C 6EF6                   MOV.L       @R15+,R14
    0000052E              L635:                             
    0000052E 00DD                   .DATA.W     H'00DD
    00000530 03E8                   .DATA.W     H'03E8
    00000532 0000                   .DATA.W     0
    00000534 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000538 <00000000>             .DATA.L     _strcmp
    0000053C <00000000>             .DATA.L     L404
    00000540 <00000000>             .DATA.L     _malloc
    00000544 <00000000>             .DATA.L     _atol
    00000548 <00000000>             .DATA.L     _memcpy
    0000054C <00000000>             .DATA.L     _RTC_GetTicks
    00000550 <00000000>             .DATA.L     _Serial_ReadNBytes
    00000554 <00000000>             .DATA.L     _RTC_Elapsed_ms
           net.c   274    
           net.c   275    void freeData(Data* data) {
    00000558              _freeData:                       ; function: freeData
                                                           ; frame size=8
    00000558 2FE6                   MOV.L       R14,@-R15
    0000055A 6E43                   MOV         R4,R14
    0000055C 4F22                   STS.L       PR,@-R15
           net.c   276            if (data != NULL) {
    0000055E 2EE8                   TST         R14,R14
    00000560 890C                   BT          L601
           net.c   277                    if (data->buf != NULL) {
    00000562 52E2                   MOV.L       @(8,R14),R2
    00000564 2228                   TST         R2,R2
    00000566 8904                   BT          L602
           net.c   278                            free(data->buf);
    00000568 D32C                   MOV.L       L636+4,R3  ; _free
    0000056A 430B                   JSR         @R3
    0000056C 54E2                   MOV.L       @(8,R14),R4
           net.c   279                            data->buf = NULL;
    0000056E E200                   MOV         #0,R2
    00000570 1E22                   MOV.L       R2,@(8,R14)
    00000572              L602:                             
           net.c   280                    }
           net.c   281                    
           net.c   282                    free(data);
    00000572 64E3                   MOV         R14,R4
    00000574 4F26                   LDS.L       @R15+,PR
    00000576 D329                   MOV.L       L636+4,R3  ; _free
    00000578 432B                   JMP         @R3
    0000057A 6EF6                   MOV.L       @R15+,R14
    0000057C              L601:                             
           net.c   283            }
           net.c   284    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000057C 4F26                   LDS.L       @R15+,PR
    0000057E 000B                   RTS
    00000580 6EF6                   MOV.L       @R15+,R14
           net.c   285    
           net.c   286    void freeNetData(NetData* data) {
    00000582              _freeNetData:                    ; function: freeNetData
                                                           ; frame size=8
    00000582 2FE6                   MOV.L       R14,@-R15
    00000584 4F22                   STS.L       PR,@-R15
    00000586 6E43                   MOV         R4,R14
           net.c   287            if (data != NULL) {
    00000588 2EE8                   TST         R14,R14
    0000058A 890C                   BT          L603
           net.c   288                    if (data->buf != NULL) {
    0000058C 52E5                   MOV.L       @(20,R14),R2
    0000058E 2228                   TST         R2,R2
    00000590 8904                   BT          L604
           net.c   289                            free(data->buf);
    00000592 D322                   MOV.L       L636+4,R3  ; _free
    00000594 430B                   JSR         @R3
    00000596 54E5                   MOV.L       @(20,R14),R4
           net.c   290                            data->buf = NULL;
    00000598 E200                   MOV         #0,R2
    0000059A 1E25                   MOV.L       R2,@(20,R14)
    0000059C              L604:                             
           net.c   291                    }
           net.c   292                    
           net.c   293                    free(data);
    0000059C 4F26                   LDS.L       @R15+,PR
    0000059E 64E3                   MOV         R14,R4
    000005A0 D31E                   MOV.L       L636+4,R3  ; _free
    000005A2 432B                   JMP         @R3
    000005A4 6EF6                   MOV.L       @R15+,R14
    000005A6              L603:                             
           net.c   294            }
           net.c   295    }
    000005A6 4F26                   LDS.L       @R15+,PR
    000005A8 000B                   RTS
    000005AA 6EF6                   MOV.L       @R15+,R14
           net.c   296    
           net.c   297    void freeNetList(NetworkList* netList) {
    000005AC              _freeNetList:                    ; function: freeNetList
                                                           ; frame size=8
    000005AC 2FE6                   MOV.L       R14,@-R15
    000005AE 6E43                   MOV         R4,R14
    000005B0 4F22                   STS.L       PR,@-R15
           net.c   298            if (netList != NULL) {
    000005B2 2EE8                   TST         R14,R14
    000005B4 8910                   BT          L605
           net.c   299                    freeNetList(netList->next);
    000005B6 BFF9                   BSR         _freeNetList
    000005B8 54E3                   MOV.L       @(12,R14),R4
           net.c   300                    netList->next = NULL;
    000005BA E300                   MOV         #0,R3
    000005BC 1E33                   MOV.L       R3,@(12,R14)
           net.c   301                    
           net.c   302                    if (netList->network.ssid != NULL) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005BE 62E2                   MOV.L       @R14,R2
    000005C0 2228                   TST         R2,R2
    000005C2 8904                   BT          L606
           net.c   303                            free(netList->network.ssid);
    000005C4 D315                   MOV.L       L636+4,R3  ; _free
    000005C6 430B                   JSR         @R3
    000005C8 64E2                   MOV.L       @R14,R4
           net.c   304                            netList->network.ssid = NULL;
    000005CA E200                   MOV         #0,R2
    000005CC 2E22                   MOV.L       R2,@R14
    000005CE              L606:                             
           net.c   305                    }
           net.c   306                    
           net.c   307                    free(netList);
    000005CE 64E3                   MOV         R14,R4
    000005D0 4F26                   LDS.L       @R15+,PR
    000005D2 D312                   MOV.L       L636+4,R3  ; _free
    000005D4 432B                   JMP         @R3
    000005D6 6EF6                   MOV.L       @R15+,R14
    000005D8              L605:                             
           net.c   308            }
           net.c   309    }
    000005D8 4F26                   LDS.L       @R15+,PR
    000005DA 000B                   RTS
    000005DC 6EF6                   MOV.L       @R15+,R14
           net.c   310    
           net.c   311    NetworkList* getAvailableNetworks() {
    000005DE              _getAvailableNetworks:           ; function: getAvailableNetworks
                                                           ; frame size=44
    000005DE 2FE6                   MOV.L       R14,@-R15
    000005E0 2FD6                   MOV.L       R13,@-R15
    000005E2 2FC6                   MOV.L       R12,@-R15
    000005E4 2FB6                   MOV.L       R11,@-R15
    000005E6 EB00                   MOV         #0,R11
           net.c   312            int status;
           net.c   313            Data* data = NULL;
           net.c   314            int counter;
           net.c   315            NetworkList *head = NULL, *tail = NULL;
           net.c   316            
           net.c   317            sendCommand((unsigned char*) "GETNETS");
    000005E8 D40D                   MOV.L       L636+8,R4  ; L450
    000005EA 2FA6                   MOV.L       R10,@-R15
    000005EC 2F96                   MOV.L       R9,@-R15
    000005EE 2F86                   MOV.L       R8,@-R15
    000005F0 4F22                   STS.L       PR,@-R15
    000005F2 68B3                   MOV         R11,R8
    000005F4 7FF4                   ADD         #-12,R15
    000005F6 BD1A                   BSR         _sendCommand
    000005F8 1FB2                   MOV.L       R11,@(8,R15)
           net.c   318            status = receiveStatus();
    000005FA BD77                   BSR         _receiveStatus
    000005FC 0009                   NOP
    000005FE 6403                   MOV         R0,R4
           net.c   319            
           net.c   320            if (status != STATUS_OK) {
    00000600 2448                   TST         R4,R4
    00000602 8B05                   BF          L502




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   321                    return NULL;
           net.c   322            }
           net.c   323            
           net.c   324            data = receiveDataTimeout(20000, 5);
    00000604 9408                   MOV.W       L636,R4    ; H'4E20
    00000606 BDE3                   BSR         _receiveDataTimeout
    00000608 E505                   MOV         #5,R5
    0000060A 6D03                   MOV         R0,R13
           net.c   325            if (data == NULL) {
    0000060C 2DD8                   TST         R13,R13
    0000060E 8B01                   BF          L609
    00000610              L502:
           net.c   326                    return NULL;
    00000610 A05F                   BRA         L608
    00000612 E000                   MOV         #0,R0
    00000614              L609:                             
           net.c   327            }
           net.c   328            
           net.c   329            counter = 0;
           net.c   330            while (counter < data->length) {
    00000614 A057                   BRA         L610
    00000616 6EB3                   MOV         R11,R14
    00000618              L636:                             
    00000618 4E20                   .DATA.W     H'4E20
    0000061A 0000                   .DATA.W     0
    0000061C <00000000>             .DATA.L     _free
    00000620 <00000000>             .DATA.L     L450
    00000624              L611:                             
           net.c   331                    NetworkList* netElement;
           net.c   332                    int ssidLength;
           net.c   333                    
           net.c   334                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    00000624 D94B                   MOV.L       L637+2,R9  ; _memchr
    00000626 E500                   MOV         #0,R5
    00000628 54D2                   MOV.L       @(8,R13),R4
    0000062A 66D2                   MOV.L       @R13,R6
    0000062C 36E8                   SUB         R14,R6
    0000062E 490B                   JSR         @R9
    00000630 34EC                   ADD         R14,R4
    00000632 2008                   TST         R0,R0
    00000634 894A                   BT          L613
           net.c   335                            break;
           net.c   336                    }
           net.c   337                    
           net.c   338                    netElement = (NetworkList*) malloc(sizeof(NetworkList));
    00000636 D248                   MOV.L       L637+6,R2  ; _malloc
    00000638 420B                   JSR         @R2
    0000063A E410                   MOV         #16,R4
           net.c   339                    netElement->network.ssid = NULL;
           net.c   340                    netElement->next = NULL;
           net.c   341                    
           net.c   342                    ssidLength = strlen(&data->buf[counter]);
    0000063C DA47                   MOV.L       L637+10,R10; _strlen
    0000063E 6C03                   MOV         R0,R12
    00000640 2CB2                   MOV.L       R11,@R12
    00000642 1CB3                   MOV.L       R11,@(12,R12)
    00000644 54D2                   MOV.L       @(8,R13),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000646 4A0B                   JSR         @R10
    00000648 34EC                   ADD         R14,R4
           net.c   343                    
           net.c   344                    netElement->network.ssid = (unsigned char*) malloc(ssidLength + 1);
    0000064A 6403                   MOV         R0,R4
    0000064C D342                   MOV.L       L637+6,R3  ; _malloc
    0000064E 7401                   ADD         #1,R4
    00000650 2F02                   MOV.L       R0,@R15
    00000652 430B                   JSR         @R3
    00000654 1F41                   MOV.L       R4,@(4,R15)
    00000656 2C02                   MOV.L       R0,@R12
           net.c   345                    strncpy(netElement->network.ssid, &data->buf[counter], ssidLength);
    00000658 66F2                   MOV.L       @R15,R6
    0000065A 55D2                   MOV.L       @(8,R13),R5
    0000065C D340                   MOV.L       L637+14,R3 ; _strncpy
    0000065E 35EC                   ADD         R14,R5
    00000660 430B                   JSR         @R3
    00000662 64C2                   MOV.L       @R12,R4
           net.c   346                    counter += ssidLength + 1;
    00000664 52F1                   MOV.L       @(4,R15),R2
           net.c   347                    
           net.c   348                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    00000666 E500                   MOV         #0,R5
    00000668 54D2                   MOV.L       @(8,R13),R4
    0000066A 3E2C                   ADD         R2,R14
    0000066C 66D2                   MOV.L       @R13,R6
    0000066E 36E8                   SUB         R14,R6
    00000670 490B                   JSR         @R9
    00000672 34EC                   ADD         R14,R4
    00000674 2008                   TST         R0,R0
    00000676 8911                   BT          L503
           net.c   349                            freeNetList(netElement);
           net.c   350                            netElement = NULL;
           net.c   351                            break;
           net.c   352                    }
           net.c   353                    
           net.c   354                    netElement->network.rssi = atoi(&data->buf[counter]);
    00000678 54D2                   MOV.L       @(8,R13),R4
    0000067A D23A                   MOV.L       L637+18,R2 ; _atoi
    0000067C 420B                   JSR         @R2
    0000067E 34EC                   ADD         R14,R4
    00000680 1C01                   MOV.L       R0,@(4,R12)
           net.c   355                    counter += strlen(&data->buf[counter]) + 1;
    00000682 54D2                   MOV.L       @(8,R13),R4
    00000684 4A0B                   JSR         @R10
    00000686 34EC                   ADD         R14,R4
           net.c   356                    
           net.c   357                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    00000688 66D2                   MOV.L       @R13,R6
    0000068A E500                   MOV         #0,R5
    0000068C 54D2                   MOV.L       @(8,R13),R4
    0000068E 7001                   ADD         #1,R0
    00000690 3E0C                   ADD         R0,R14
    00000692 36E8                   SUB         R14,R6
    00000694 490B                   JSR         @R9
    00000696 34EC                   ADD         R14,R4
    00000698 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000069A 8B03                   BF          L615
    0000069C              L503:
           net.c   358                            freeNetList(netElement);
    0000069C BF86                   BSR         _freeNetList
    0000069E 64C3                   MOV         R12,R4
           net.c   359                            netElement = NULL;
           net.c   360                            break;
    000006A0 A014                   BRA         L613
    000006A2 0009                   NOP
    000006A4              L615:                             
           net.c   361                    }
           net.c   362                    
           net.c   363                    netElement->network.encType = atoi(&data->buf[counter]);
    000006A4 54D2                   MOV.L       @(8,R13),R4
    000006A6 D22F                   MOV.L       L637+18,R2 ; _atoi
    000006A8 420B                   JSR         @R2
    000006AA 34EC                   ADD         R14,R4
    000006AC 1C02                   MOV.L       R0,@(8,R12)
           net.c   364                    counter += strlen(&data->buf[counter]) + 1;
    000006AE 54D2                   MOV.L       @(8,R13),R4
    000006B0 4A0B                   JSR         @R10
    000006B2 34EC                   ADD         R14,R4
    000006B4 7001                   ADD         #1,R0
           net.c   365                    
           net.c   366                    if (head == NULL) {
    000006B6 2888                   TST         R8,R8
    000006B8 8F02                   BF/S        L616
    000006BA 3E0C                   ADD         R0,R14
    000006BC A002                   BRA         L501
           net.c   367                            head = netElement;
    000006BE 68C3                   MOV         R12,R8
    000006C0              L616:                             
           net.c   368                            tail = netElement;
           net.c   369                    } else {
           net.c   370                            tail->next = netElement;
    000006C0 52F2                   MOV.L       @(8,R15),R2
    000006C2 12C3                   MOV.L       R12,@(12,R2)
    000006C4              L501:
           net.c   371                            tail = netElement;
    000006C4 1FC2                   MOV.L       R12,@(8,R15)
    000006C6              L610:                             
    000006C6 63D2                   MOV.L       @R13,R3
    000006C8 3E32                   CMP/HS      R3,R14
    000006CA 8BAB                   BF          L611
    000006CC              L613:                             
           net.c   372                    }
           net.c   373            }
           net.c   374            
           net.c   375            freeData(data);
    000006CC BF44                   BSR         _freeData
    000006CE 64D3                   MOV         R13,R4
           net.c   376            data = NULL;
           net.c   377            
           net.c   378            return head;
    000006D0 6083                   MOV         R8,R0
           net.c   379    }
    000006D2              L608:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006D2 7F0C                   ADD         #12,R15
    000006D4 4F26                   LDS.L       @R15+,PR
    000006D6 68F6                   MOV.L       @R15+,R8
    000006D8 69F6                   MOV.L       @R15+,R9
    000006DA 6AF6                   MOV.L       @R15+,R10
    000006DC 6BF6                   MOV.L       @R15+,R11
    000006DE 6CF6                   MOV.L       @R15+,R12
    000006E0 6DF6                   MOV.L       @R15+,R13
    000006E2 000B                   RTS
    000006E4 6EF6                   MOV.L       @R15+,R14
           net.c   380    
           net.c   381    int connect(int index, unsigned char* pass) {
    000006E6              _connect:                        ; function: connect
                                                           ; frame size=68
    000006E6 2FE6                   MOV.L       R14,@-R15
    000006E8 4F22                   STS.L       PR,@-R15
    000006EA 7FCC                   ADD         #-52,R15
    000006EC 1F41                   MOV.L       R4,@(4,R15)
           net.c   382            unsigned char* buf[11];
           net.c   383            int status;
           net.c   384            
           net.c   385            sendCommand((unsigned char*) "CONNECT");
    000006EE D41E                   MOV.L       L637+22,R4 ; L468
    000006F0 BC9D                   BSR         _sendCommand
    000006F2 2F52                   MOV.L       R5,@R15
           net.c   386            sprintf(buf, "%d", index);
    000006F4 52F1                   MOV.L       @(4,R15),R2
    000006F6 6EF3                   MOV         R15,R14
    000006F8 D31C                   MOV.L       L637+26,R3 ; L469
    000006FA 7E08                   ADD         #8,R14
    000006FC 2F26                   MOV.L       R2,@-R15
    000006FE 2F36                   MOV.L       R3,@-R15
    00000700 D21B                   MOV.L       L637+30,R2 ; _sprintf
    00000702 420B                   JSR         @R2
    00000704 64E3                   MOV         R14,R4
    00000706 7F08                   ADD         #8,R15
           net.c   387            Serial_BufferedTransmitNBytes(buf, strlen(buf) + 1);
    00000708 D314                   MOV.L       L637+10,R3 ; _strlen
    0000070A 430B                   JSR         @R3
    0000070C 64E3                   MOV         R14,R4
    0000070E 6503                   MOV         R0,R5
    00000710 D218                   MOV.L       L637+34,R2 ; _Serial_BufferedTransmitNBytes
    00000712 7501                   ADD         #1,R5
    00000714 420B                   JSR         @R2
    00000716 64E3                   MOV         R14,R4
           net.c   388            Serial_BufferedTransmitNBytes(pass, strlen(pass) + 1);
    00000718 D310                   MOV.L       L637+10,R3 ; _strlen
    0000071A 430B                   JSR         @R3
    0000071C 64F2                   MOV.L       @R15,R4
    0000071E 6503                   MOV         R0,R5
    00000720 D314                   MOV.L       L637+34,R3 ; _Serial_BufferedTransmitNBytes
    00000722 7501                   ADD         #1,R5
    00000724 430B                   JSR         @R3
    00000726 64F2                   MOV.L       @R15,R4
           net.c   389            
           net.c   390            status = receiveStatus();
    00000728 BCE0                   BSR         _receiveStatus




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000072A 0009                   NOP
    0000072C 6403                   MOV         R0,R4
           net.c   391            
           net.c   392            if (status == STATUS_OK) {
    0000072E 2448                   TST         R4,R4
    00000730 0029                   MOVT        R0
           net.c   393                    return 1;
           net.c   394            }
           net.c   395            
           net.c   396            return 0;
           net.c   397    }
    00000732 7F34                   ADD         #52,R15
    00000734 4F26                   LDS.L       @R15+,PR
    00000736 000B                   RTS
    00000738 6EF6                   MOV.L       @R15+,R14
           net.c   398    
           net.c   399    int disconnect() {
    0000073A              _disconnect:                     ; function: disconnect
                                                           ; frame size=4
    0000073A 4F22                   STS.L       PR,@-R15
           net.c   400            int status;
           net.c   401            
           net.c   402            sendCommand((unsigned char*) "DISCONNECT");
    0000073C D40E                   MOV.L       L637+38,R4 ; L473
    0000073E BC76                   BSR         _sendCommand
    00000740 0009                   NOP
           net.c   403            status = receiveStatus();
    00000742 BCD3                   BSR         _receiveStatus
    00000744 0009                   NOP
    00000746 6403                   MOV         R0,R4
           net.c   404            
           net.c   405            if (status == STATUS_OK) {
           net.c   406                    return 1;
           net.c   407            }
           net.c   408            
           net.c   409            return 0;
           net.c   410    }
    00000748 4F26                   LDS.L       @R15+,PR
    0000074A 2448                   TST         R4,R4
    0000074C 0029                   MOVT        R0
    0000074E 000B                   RTS
    00000750 0009                   NOP
    00000752              L637:                             
    00000752 0000                   .DATA.W     0
    00000754 <00000000>             .DATA.L     _memchr
    00000758 <00000000>             .DATA.L     _malloc
    0000075C <00000000>             .DATA.L     _strlen
    00000760 <00000000>             .DATA.L     _strncpy
    00000764 <00000000>             .DATA.L     _atoi
    00000768 <00000000>             .DATA.L     L468
    0000076C <00000000>             .DATA.L     L469
    00000770 <00000000>             .DATA.L     _sprintf
    00000774 <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    00000778 <00000000>             .DATA.L     L473
           net.c   411    
           net.c   412    Network getNetworkInfo() {
    0000077C              _getNetworkInfo:                 ; function: getNetworkInfo




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    0000077C 2FE6                   MOV.L       R14,@-R15
    0000077E 2FD6                   MOV.L       R13,@-R15
    00000780 2FC6                   MOV.L       R12,@-R15
           net.c   413            int status;
           net.c   414            Network net;
           net.c   415            Data* data;
           net.c   416            
           net.c   417            net.ssid = NULL;
    00000782 EC00                   MOV         #0,R12
           net.c   418            net.rssi = 0;
           net.c   419            net.encType = 0;
           net.c   420            
           net.c   421            sendCommand((unsigned char*) "GETNETINFO");
    00000784 D442                   MOV.L       L638+2,R4  ; L479
    00000786 2FB6                   MOV.L       R11,@-R15
    00000788 2FA6                   MOV.L       R10,@-R15
    0000078A 4F22                   STS.L       PR,@-R15
    0000078C 7FF0                   ADD         #-16,R15
    0000078E 6EF3                   MOV         R15,R14
    00000790 7E04                   ADD         #4,R14
    00000792 2EC2                   MOV.L       R12,@R14
    00000794 1EC1                   MOV.L       R12,@(4,R14)
    00000796 BC4A                   BSR         _sendCommand
    00000798 1EC2                   MOV.L       R12,@(8,R14)
           net.c   422            status = receiveStatus();
    0000079A BCA7                   BSR         _receiveStatus
    0000079C 0009                   NOP
    0000079E 6403                   MOV         R0,R4
           net.c   423            
           net.c   424            if (status != STATUS_OK) {
    000007A0 2448                   TST         R4,R4
    000007A2 8B0F                   BF          L506
           net.c   425                    return net;
           net.c   426            }
           net.c   427            
           net.c   428            data = receiveDataTimeout(500, 1);
    000007A4 9473                   MOV.W       L638,R4    ; H'01F4
    000007A6 BD13                   BSR         _receiveDataTimeout
    000007A8 E501                   MOV         #1,R5
    000007AA 6D03                   MOV         R0,R13
           net.c   429            if (data == NULL) {
    000007AC 2DD8                   TST         R13,R13
    000007AE 8909                   BT          L506
           net.c   430                    return net;
           net.c   431            }
           net.c   432            
           net.c   433            {
           net.c   434                    int counter = 0;
           net.c   435                    int ssidLength;
           net.c   436                    
           net.c   437                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    000007B0 66D2                   MOV.L       @R13,R6
    000007B2 E500                   MOV         #0,R5
    000007B4 D337                   MOV.L       L638+6,R3  ; _memchr




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007B6 6BC3                   MOV         R12,R11
    000007B8 430B                   JSR         @R3
    000007BA 54D2                   MOV.L       @(8,R13),R4
    000007BC 2008                   TST         R0,R0
    000007BE 8B08                   BF          L625
    000007C0 A02B                   BRA         L513
    000007C2 0009                   NOP
    000007C4              L506:
    000007C4 51FA                   MOV.L       @(40,R15),R1
    000007C6 62E3                   MOV         R14,R2
    000007C8 D333                   MOV.L       L638+10,R3 ; __quick_odd_mvn
    000007CA 430B                   JSR         @R3
    000007CC E00C                   MOV         #12,R0
    000007CE A02B                   BRA         L623
    000007D0 0009                   NOP
    000007D2              L625:                             
           net.c   438                            freeData(data);
           net.c   439                            data = NULL;
           net.c   440                            return net;
           net.c   441                    }
           net.c   442                    
           net.c   443                    ssidLength = strlen(&data->buf[counter]);
    000007D2 D232                   MOV.L       L638+14,R2 ; _strlen
    000007D4 420B                   JSR         @R2
    000007D6 54D2                   MOV.L       @(8,R13),R4
           net.c   444                    
           net.c   445                    net.ssid = (unsigned char*) malloc(ssidLength + 1);
    000007D8 D331                   MOV.L       L638+18,R3 ; _malloc
    000007DA 6A03                   MOV         R0,R10
    000007DC 6403                   MOV         R0,R4
    000007DE 7401                   ADD         #1,R4
    000007E0 430B                   JSR         @R3
    000007E2 2F42                   MOV.L       R4,@R15
    000007E4 2E02                   MOV.L       R0,@R14
           net.c   446                    strncpy(net.ssid, &data->buf[counter], ssidLength);
    000007E6 66A3                   MOV         R10,R6
    000007E8 D22E                   MOV.L       L638+22,R2 ; _strncpy
    000007EA 55D2                   MOV.L       @(8,R13),R5
    000007EC 420B                   JSR         @R2
    000007EE 6403                   MOV         R0,R4
           net.c   447                    counter += ssidLength + 1;
    000007F0 63F2                   MOV.L       @R15,R3
           net.c   448                    
           net.c   449                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    000007F2 E500                   MOV         #0,R5
    000007F4 54D2                   MOV.L       @(8,R13),R4
    000007F6 3B3C                   ADD         R3,R11
    000007F8 66D2                   MOV.L       @R13,R6
    000007FA 36B8                   SUB         R11,R6
    000007FC D325                   MOV.L       L638+6,R3  ; _memchr
    000007FE 430B                   JSR         @R3
    00000800 34BC                   ADD         R11,R4
    00000802 2008                   TST         R0,R0
    00000804 8B04                   BF          L626
           net.c   450                            free(net.ssid);
    00000806 D328                   MOV.L       L638+26,R3 ; _free
    00000808 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000080A 64E2                   MOV.L       @R14,R4
    0000080C A005                   BRA         L513
           net.c   451                            net.ssid = NULL;
    0000080E 2EC2                   MOV.L       R12,@R14
    00000810              L626:                             
           net.c   452                            freeData(data);
           net.c   453                            data = NULL;
           net.c   454                            return net;
           net.c   455                    }
           net.c   456                    
           net.c   457                    net.rssi = atoi(&data->buf[counter]);
    00000810 54D2                   MOV.L       @(8,R13),R4
    00000812 D326                   MOV.L       L638+30,R3 ; _atoi
    00000814 430B                   JSR         @R3
    00000816 34BC                   ADD         R11,R4
    00000818 1E01                   MOV.L       R0,@(4,R14)
    0000081A              L513:
           net.c   458            }
           net.c   459            
           net.c   460            freeData(data);
    0000081A BE9D                   BSR         _freeData
    0000081C 64D3                   MOV         R13,R4
    0000081E 62E3                   MOV         R14,R2
    00000820 D31D                   MOV.L       L638+10,R3 ; __quick_odd_mvn
    00000822 51FA                   MOV.L       @(40,R15),R1
    00000824 430B                   JSR         @R3
    00000826 E00C                   MOV         #12,R0
           net.c   461            data = NULL;
           net.c   462            
           net.c   463            return net;
           net.c   464    }
    00000828              L623:                             
    00000828 7F10                   ADD         #16,R15
    0000082A 4F26                   LDS.L       @R15+,PR
    0000082C 6AF6                   MOV.L       @R15+,R10
    0000082E 6BF6                   MOV.L       @R15+,R11
    00000830 6CF6                   MOV.L       @R15+,R12
    00000832 6DF6                   MOV.L       @R15+,R13
    00000834 000B                   RTS
    00000836 6EF6                   MOV.L       @R15+,R14
           net.c   465    
           net.c   466    int startAP(unsigned char* ssid, unsigned char* password) {
    00000838              _startAP:                        ; function: startAP
                                                           ; frame size=12
    00000838 4F22                   STS.L       PR,@-R15
    0000083A 7FF8                   ADD         #-8,R15
    0000083C 1F41                   MOV.L       R4,@(4,R15)
           net.c   467            int status;
           net.c   468            
           net.c   469            sendCommand((unsigned char*) "STARTAP");
    0000083E D41C                   MOV.L       L638+34,R4 ; L491
    00000840 BBF5                   BSR         _sendCommand
    00000842 2F52                   MOV.L       R5,@R15
           net.c   470            Serial_BufferedTransmitNBytes(ssid, strlen(ssid) + 1);
    00000844 D315                   MOV.L       L638+14,R3 ; _strlen
    00000846 430B                   JSR         @R3
    00000848 54F1                   MOV.L       @(4,R15),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000084A 6503                   MOV         R0,R5
    0000084C D319                   MOV.L       L638+38,R3 ; _Serial_BufferedTransmitNBytes
    0000084E 7501                   ADD         #1,R5
    00000850 430B                   JSR         @R3
    00000852 54F1                   MOV.L       @(4,R15),R4
           net.c   471            Serial_BufferedTransmitNBytes(password, strlen(password) + 1);
    00000854 D311                   MOV.L       L638+14,R3 ; _strlen
    00000856 430B                   JSR         @R3
    00000858 64F2                   MOV.L       @R15,R4
    0000085A 6503                   MOV         R0,R5
    0000085C D315                   MOV.L       L638+38,R3 ; _Serial_BufferedTransmitNBytes
    0000085E 7501                   ADD         #1,R5
    00000860 430B                   JSR         @R3
    00000862 64F2                   MOV.L       @R15,R4
           net.c   472            status = receiveStatus();
    00000864 BC42                   BSR         _receiveStatus
    00000866 0009                   NOP
    00000868 6403                   MOV         R0,R4
           net.c   473            
           net.c   474            if (status == STATUS_OK) {
    0000086A 2448                   TST         R4,R4
    0000086C 0029                   MOVT        R0
           net.c   475                    return 1;
           net.c   476            }
           net.c   477            
           net.c   478            return 0;
           net.c   479    }
    0000086E 7F08                   ADD         #8,R15
    00000870 4F26                   LDS.L       @R15+,PR
    00000872 000B                   RTS
    00000874 0009                   NOP
           net.c   480    
           net.c   481    int stopAP() {
    00000876              _stopAP:                         ; function: stopAP
                                                           ; frame size=4
    00000876 4F22                   STS.L       PR,@-R15
           net.c   482            int status;
           net.c   483            
           net.c   484            sendCommand((unsigned char*) "STOPAP");
    00000878 D40F                   MOV.L       L638+42,R4 ; L495
    0000087A BBD8                   BSR         _sendCommand
    0000087C 0009                   NOP
           net.c   485            status = receiveStatus();
    0000087E BC35                   BSR         _receiveStatus
    00000880 0009                   NOP
    00000882 6403                   MOV         R0,R4
           net.c   486            
           net.c   487            if (status == STATUS_OK) {
           net.c   488                    return 1;
           net.c   489            }
           net.c   490            
           net.c   491            return 0;
           net.c   492    }
    00000884 4F26                   LDS.L       @R15+,PR
    00000886 2448                   TST         R4,R4
    00000888 0029                   MOVT        R0
    0000088A 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000088C 0009                   NOP
    0000088E              L638:                             
    0000088E 01F4                   .DATA.W     H'01F4
    00000890 <00000000>             .DATA.L     L479
    00000894 <00000000>             .DATA.L     _memchr
    00000898 <00000000>             .DATA.L     __quick_odd_mvn
    0000089C <00000000>             .DATA.L     _strlen
    000008A0 <00000000>             .DATA.L     _malloc
    000008A4 <00000000>             .DATA.L     _strncpy
    000008A8 <00000000>             .DATA.L     _free
    000008AC <00000000>             .DATA.L     _atoi
    000008B0 <00000000>             .DATA.L     L491
    000008B4 <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    000008B8 <00000000>             .DATA.L     L495
C   00000000              L385:
    00000000 44415441               .SDATA      "DATA"
    00000004 00                     .DATA.B     H'00
    00000005 00000001               .RES.B      1
    00000006 00000002               .RES.W      1
    00000008              L396:
    00000008 4445                   .SDATA      "DE"
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L398:
    0000000C 4F4B                   .SDATA      "OK"
    0000000E 00                     .DATA.B     H'00
    0000000F 00000001               .RES.B      1
    00000010              L404:
    00000010 4E45544441             .SDATA      "NETDATA"
             5441         
    00000017 00                     .DATA.B     H'00
    00000018              L405:
    00000018 2575                   .SDATA      "%u"
    0000001A 00                     .DATA.B     H'00
    0000001B 00000001               .RES.B      1
    0000001C              L450:
    0000001C 4745544E45             .SDATA      "GETNETS"
             5453         
    00000023 00                     .DATA.B     H'00
    00000024              L468:
    00000024 434F4E4E45             .SDATA      "CONNECT"
             4354         
    0000002B 00                     .DATA.B     H'00
    0000002C              L469:
    0000002C 2564                   .SDATA      "%d"
    0000002E 00                     .DATA.B     H'00
    0000002F 00000001               .RES.B      1
    00000030              L473:
    00000030 444953434F             .SDATA      "DISCONNECT"
             4E4E454354   
    0000003A 00                     .DATA.B     H'00
    0000003B 00000001               .RES.B      1
    0000003C              L479:
    0000003C 4745544E45             .SDATA      "GETNETINFO"
             54494E464F   
    00000046 00                     .DATA.B     H'00
    00000047 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000048              L491:
    00000048 5354415254             .SDATA      "STARTAP"
             4150         
    0000004F 00                     .DATA.B     H'00
    00000050              L495:
    00000050 53544F5041             .SDATA      "STOPAP"
             50           
    00000056 00                     .DATA.B     H'00





















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 17-Dec-2018 22:08:39  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        20




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      492



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000008BC Byte(s)
CONSTANT SECTION (C):                               00000057 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000913 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          23
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           121






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Niko\AppData\Local\Temp\hmkD636.tmp 

