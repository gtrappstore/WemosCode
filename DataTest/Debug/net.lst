SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\Documents\GTR\Wifi\DataTest\net.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c     1    #include "net.h"
           net.c     2    #include "stdio.h"
           net.c     3    
           net.c     4    void openSerial() {
P   00000000              _openSerial:                     ; function: openSerial
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
           net.c     5        unsigned char mode[6];
           net.c     6        mode[0] = 0;
    00000002 E400                   MOV         #0,R4
           net.c     7        mode[1] = 5;
           net.c     8        mode[2] = 0;
           net.c     9        mode[3] = 0;
           net.c    10        mode[4] = 0;
           net.c    11        mode[5] = 0;
           net.c    12    
           net.c    13        Serial_Open(mode);
    00000004 D346                   MOV.L       L479+6,R3  ; _Serial_Open
    00000006 E005                   MOV         #5,R0
    00000008 4F22                   STS.L       PR,@-R15
    0000000A 7FF8                   ADD         #-8,R15
    0000000C 6EF3                   MOV         R15,R14
    0000000E 2E40                   MOV.B       R4,@R14
    00000010 80E1                   MOV.B       R0,@(1,R14)
    00000012 6043                   MOV         R4,R0
    00000014 80E2                   MOV.B       R0,@(2,R14)
    00000016 80E3                   MOV.B       R0,@(3,R14)
    00000018 80E4                   MOV.B       R0,@(4,R14)
    0000001A 80E5                   MOV.B       R0,@(5,R14)
    0000001C 430B                   JSR         @R3
    0000001E 64E3                   MOV         R14,R4
           net.c    14    }
    00000020 7F08                   ADD         #8,R15
    00000022 4F26                   LDS.L       @R15+,PR
    00000024 000B                   RTS
    00000026 6EF6                   MOV.L       @R15+,R14
           net.c    15    
           net.c    16    void closeSerial() {
    00000028              _closeSerial:                    ; function: closeSerial
                                                           ; frame size=0
           net.c    17            Serial_Close(1);
    00000028 D33E                   MOV.L       L479+10,R3 ; _Serial_Close
    0000002A 432B                   JMP         @R3
    0000002C E401                   MOV         #1,R4
           net.c    18    }
           net.c    19    
           net.c    20    void sendCommand(unsigned char* command) {
    0000002E              _sendCommand:                    ; function: sendCommand
                                                           ; frame size=8
    0000002E 4F22                   STS.L       PR,@-R15
    00000030 2F46                   MOV.L       R4,@-R15
           net.c    21            Serial_BufferedTransmitOneByte((unsigned char) 219);
    00000032 9472                   MOV.W       L479,R4    ; H'00DB
    00000034 D33C                   MOV.L       L479+14,R3 ; _Serial_BufferedTransmitOneByte




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000036 430B                   JSR         @R3
    00000038 0009                   NOP
           net.c    22            Serial_BufferedTransmitNBytes(command, strlen(command) + 1);
    0000003A D33C                   MOV.L       L479+18,R3 ; _strlen
    0000003C 430B                   JSR         @R3
    0000003E 64F2                   MOV.L       @R15,R4
    00000040 64F2                   MOV.L       @R15,R4
    00000042 6503                   MOV         R0,R5
    00000044 D33A                   MOV.L       L479+22,R3 ; _Serial_BufferedTransmitNBytes
    00000046 7F04                   ADD         #4,R15
    00000048 7501                   ADD         #1,R5
    0000004A 432B                   JMP         @R3
    0000004C 4F26                   LDS.L       @R15+,PR
           net.c    23    }
           net.c    24    
           net.c    25    void sendStatus(unsigned char* status) {
    0000004E              _sendStatus:                     ; function: sendStatus
                                                           ; frame size=8
    0000004E 4F22                   STS.L       PR,@-R15
    00000050 2F46                   MOV.L       R4,@-R15
           net.c    26            Serial_BufferedTransmitOneByte((unsigned char) 220);
    00000052 9463                   MOV.W       L479+2,R4  ; H'00DC
    00000054 D334                   MOV.L       L479+14,R3 ; _Serial_BufferedTransmitOneByte
    00000056 430B                   JSR         @R3
    00000058 0009                   NOP
           net.c    27            Serial_BufferedTransmitNBytes(status, strlen(status) + 1);
    0000005A D334                   MOV.L       L479+18,R3 ; _strlen
    0000005C 430B                   JSR         @R3
    0000005E 64F2                   MOV.L       @R15,R4
    00000060 64F2                   MOV.L       @R15,R4
    00000062 6503                   MOV         R0,R5
    00000064 D332                   MOV.L       L479+22,R3 ; _Serial_BufferedTransmitNBytes
    00000066 7F04                   ADD         #4,R15
    00000068 7501                   ADD         #1,R5
    0000006A 432B                   JMP         @R3
    0000006C 4F26                   LDS.L       @R15+,PR
           net.c    28    }
           net.c    29    
           net.c    30    int receiveString(unsigned char* buf, int maxLen) {
    0000006E              _receiveString:                  ; function: receiveString
                                                           ; frame size=0
           net.c    31            return receiveStringTimeout(buf, maxLen, 500);
    0000006E 9656                   MOV.W       L479+4,R6  ; H'01F4
    00000070 A000                   BRA         _receiveStringTimeout
    00000072 0009                   NOP
           net.c    32    }
           net.c    33    
           net.c    34    int receiveStringTimeout(unsigned char* buf, int maxLen, int timeout) { // Bei true ist nicht getimeouted
    00000074              _receiveStringTimeout:           ; function: receiveStringTimeout
                                                           ; frame size=44
    00000074 2FE6                   MOV.L       R14,@-R15
    00000076 2FD6                   MOV.L       R13,@-R15
    00000078 2FC6                   MOV.L       R12,@-R15
    0000007A 2FB6                   MOV.L       R11,@-R15
    0000007C 2FA6                   MOV.L       R10,@-R15
    0000007E 2F96                   MOV.L       R9,@-R15
    00000080 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000082 6943                   MOV         R4,R9
           net.c    35            int startTicks = RTC_GetTicks();
    00000084 D32B                   MOV.L       L479+26,R3 ; _RTC_GetTicks
    00000086 4F22                   STS.L       PR,@-R15
    00000088 7FF4                   ADD         #-12,R15
    0000008A 1F52                   MOV.L       R5,@(8,R15)
    0000008C 430B                   JSR         @R3
    0000008E 1F61                   MOV.L       R6,@(4,R15)
    00000090 DB29                   MOV.L       L479+30,R11; _RTC_Elapsed_ms
    00000092 EE01                   MOV         #1,R14
    00000094 5AF2                   MOV.L       @(8,R15),R10
    00000096 6803                   MOV         R0,R8
           net.c    36            int numChars = 0;
    00000098 ED00                   MOV         #0,R13
           net.c    37            int ret = 0;
    0000009A 6CD3                   MOV         R13,R12
           net.c    38            
           net.c    39            while (!RTC_Elapsed_ms(startTicks, timeout)) {
    0000009C A013                   BRA         L427
    0000009E 7AFF                   ADD         #-1,R10
    000000A0              L428:                             
           net.c    40                    if (Serial_GetReceivedBytesAvailable() >= 1) {
    000000A0 D226                   MOV.L       L479+34,R2 ; _Serial_GetReceivedBytesAvailable
    000000A2 420B                   JSR         @R2
    000000A4 0009                   NOP
    000000A6 30E3                   CMP/GE      R14,R0
    000000A8 8B0D                   BF          L427
           net.c    41                            unsigned char c;
           net.c    42                            Serial_ReadOneByte(&c);
    000000AA D225                   MOV.L       L479+38,R2 ; _Serial_ReadOneByte
    000000AC 420B                   JSR         @R2
    000000AE 64F3                   MOV         R15,R4
           net.c    43                            
           net.c    44                            if (c == 0 || numChars >= maxLen - 1) {
    000000B0 63F0                   MOV.B       @R15,R3
    000000B2 2338                   TST         R3,R3
    000000B4 8901                   BT          L431
    000000B6 3DA3                   CMP/GE      R10,R13
    000000B8 8B01                   BF          L430
    000000BA              L431:                             
           net.c    45                                    ret = 1;
           net.c    46                                    break;
    000000BA A009                   BRA         L432
    000000BC 6CE3                   MOV         R14,R12
    000000BE              L430:                             
           net.c    47                            }
           net.c    48                            
           net.c    49                            buf[numChars++] = c;
    000000BE 60D3                   MOV         R13,R0
    000000C0 63F0                   MOV.B       @R15,R3
    000000C2 7D01                   ADD         #1,R13
    000000C4 0934                   MOV.B       R3,@(R0,R9)
    000000C6              L427:                             
    000000C6 55F1                   MOV.L       @(4,R15),R5
    000000C8 4B0B                   JSR         @R11
    000000CA 6483                   MOV         R8,R4
    000000CC 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000CE 89E7                   BT          L428
    000000D0              L432:                             
           net.c    50                    }
           net.c    51            }
           net.c    52            
           net.c    53            buf[numChars] = 0;
    000000D0 60D3                   MOV         R13,R0
    000000D2 E300                   MOV         #0,R3
    000000D4 0934                   MOV.B       R3,@(R0,R9)
           net.c    54            return ret;
    000000D6 60C3                   MOV         R12,R0
           net.c    55    }
    000000D8 7F0C                   ADD         #12,R15
    000000DA 4F26                   LDS.L       @R15+,PR
    000000DC 68F6                   MOV.L       @R15+,R8
    000000DE 69F6                   MOV.L       @R15+,R9
    000000E0 6AF6                   MOV.L       @R15+,R10
    000000E2 6BF6                   MOV.L       @R15+,R11
    000000E4 6CF6                   MOV.L       @R15+,R12
    000000E6 6DF6                   MOV.L       @R15+,R13
    000000E8 000B                   RTS
    000000EA 6EF6                   MOV.L       @R15+,R14
           net.c    56    
           net.c    57    int receiveStatus() {
    000000EC              _receiveStatus:                  ; function: receiveStatus
                                                           ; frame size=0
           net.c    58            return receiveStatusTimeout(500);
    000000EC 9417                   MOV.W       L479+4,R4  ; H'01F4
    000000EE A000                   BRA         _receiveStatusTimeout
    000000F0 0009                   NOP
           net.c    59    }
           net.c    60    
           net.c    61    int receiveStatusTimeout(int timeout) {
    000000F2              _receiveStatusTimeout:           ; function: receiveStatusTimeout
                                                           ; frame size=48
    000000F2 2FE6                   MOV.L       R14,@-R15
    000000F4 2FD6                   MOV.L       R13,@-R15
    000000F6 2FC6                   MOV.L       R12,@-R15
    000000F8 2FB6                   MOV.L       R11,@-R15
    000000FA 2FA6                   MOV.L       R10,@-R15
    000000FC 2F96                   MOV.L       R9,@-R15
    000000FE 2F86                   MOV.L       R8,@-R15
    00000100 4F22                   STS.L       PR,@-R15
    00000102 7FF0                   ADD         #-16,R15
           net.c    62            int startTicks = RTC_GetTicks();
    00000104 D30B                   MOV.L       L479+26,R3 ; _RTC_GetTicks
    00000106 430B                   JSR         @R3
    00000108 6D43                   MOV         R4,R13
    0000010A 6903                   MOV         R0,R9
    0000010C D80D                   MOV.L       L479+42,R8 ; _convertStatus
    0000010E EC01                   MOV         #1,R12
    00000110 DA0A                   MOV.L       L479+34,R10; _Serial_GetReceivedBytesAvailable
    00000112 6EF3                   MOV         R15,R14
    00000114 9B02                   MOV.W       L479+2,R11 ; H'00DC
           net.c    63            unsigned char statusBuf[11];
           net.c    64            
           net.c    65            while (!RTC_Elapsed_ms(startTicks, timeout)) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000116 A02A                   BRA         L435
    00000118 7E04                   ADD         #4,R14
    0000011A              L479:                             
    0000011A 00DB                   .DATA.W     H'00DB
    0000011C 00DC                   .DATA.W     H'00DC
    0000011E 01F4                   .DATA.W     H'01F4
    00000120 <00000000>             .DATA.L     _Serial_Open
    00000124 <00000000>             .DATA.L     _Serial_Close
    00000128 <00000000>             .DATA.L     _Serial_BufferedTransmitOneByte
    0000012C <00000000>             .DATA.L     _strlen
    00000130 <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    00000134 <00000000>             .DATA.L     _RTC_GetTicks
    00000138 <00000000>             .DATA.L     _RTC_Elapsed_ms
    0000013C <00000000>             .DATA.L     _Serial_GetReceivedBytesAvailable
    00000140 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000144 <00000000>             .DATA.L     _convertStatus
    00000148              L436:                             
           net.c    66                    if (Serial_GetReceivedBytesAvailable() >= 1) {
    00000148 4A0B                   JSR         @R10
    0000014A 0009                   NOP
    0000014C 30C3                   CMP/GE      R12,R0
    0000014E 8B0E                   BF          L435
           net.c    67                            unsigned char c;
           net.c    68                            Serial_ReadOneByte(&c);
    00000150 D22B                   MOV.L       L480+4,R2  ; _Serial_ReadOneByte
    00000152 420B                   JSR         @R2
    00000154 64F3                   MOV         R15,R4
           net.c    69                            
           net.c    70                            if (c == 220) {
    00000156 63F0                   MOV.B       @R15,R3
    00000158 633C                   EXTU.B      R3,R3
    0000015A 33B0                   CMP/EQ      R11,R3
    0000015C 8B07                   BF          L435
           net.c    71                                    receiveStringTimeout(statusBuf, 11, timeout);
    0000015E 66D3                   MOV         R13,R6
    00000160 E50B                   MOV         #11,R5
    00000162 BF87                   BSR         _receiveStringTimeout
    00000164 64E3                   MOV         R14,R4
           net.c    72                                    return convertStatus(statusBuf);
    00000166 480B                   JSR         @R8
    00000168 64E3                   MOV         R14,R4
    0000016A A007                   BRA         L439
    0000016C 0009                   NOP
    0000016E              L435:                             
    0000016E 65D3                   MOV         R13,R5
    00000170 D324                   MOV.L       L480+8,R3  ; _RTC_Elapsed_ms
    00000172 430B                   JSR         @R3
    00000174 6493                   MOV         R9,R4
    00000176 2008                   TST         R0,R0
    00000178 89E6                   BT          L436
           net.c    73                            }
           net.c    74                    }
           net.c    75            }
           net.c    76            
           net.c    77            return -1;
    0000017A E0FF                   MOV         #-1,R0
           net.c    78    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000017C              L439:                             
    0000017C 7F10                   ADD         #16,R15
    0000017E 4F26                   LDS.L       @R15+,PR
    00000180 68F6                   MOV.L       @R15+,R8
    00000182 69F6                   MOV.L       @R15+,R9
    00000184 6AF6                   MOV.L       @R15+,R10
    00000186 6BF6                   MOV.L       @R15+,R11
    00000188 6CF6                   MOV.L       @R15+,R12
    0000018A 6DF6                   MOV.L       @R15+,R13
    0000018C 000B                   RTS
    0000018E 6EF6                   MOV.L       @R15+,R14
           net.c    79    
           net.c    80    unsigned int calculateChecksum(unsigned char* buf, int len) {
    00000190              _calculateChecksum:              ; function: calculateChecksum
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __modlu
    00000190 2FE6                   MOV.L       R14,@-R15
           net.c    81            unsigned int checksum = 0;
    00000192 E600                   MOV         #0,R6
    00000194 4F22                   STS.L       PR,@-R15
    00000196 EE00                   MOV         #0,R14
    00000198 3E4C                   ADD         R4,R14
           net.c    82            int counter;
           net.c    83            
           net.c    84            for (counter = 0; counter < len; counter++) {
    0000019A 4515                   CMP/PL      R5
    0000019C 942E                   MOV.W       L480,R4    ; H'2710
    0000019E 8F0D                   BF/S        L440
    000001A0 6763                   MOV         R6,R7
    000001A2              L441:                             
           net.c    85                    checksum += buf[counter];
    000001A2 63E4                   MOV.B       @R14+,R3
    000001A4 633C                   EXTU.B      R3,R3
    000001A6 363C                   ADD         R3,R6
           net.c    86                    
           net.c    87                    if (checksum > 10000) {
    000001A8 3646                   CMP/HI      R4,R6
    000001AA 8B04                   BF          L442
           net.c    88                            checksum = checksum % 10000;
    000001AC D316                   MOV.L       L480+12,R3 ; __modlu
    000001AE 6163                   MOV         R6,R1
    000001B0 430B                   JSR         @R3
    000001B2 6043                   MOV         R4,R0
    000001B4 6603                   MOV         R0,R6
    000001B6              L442:                             
    000001B6 7701                   ADD         #1,R7
    000001B8 3753                   CMP/GE      R5,R7
    000001BA 8BF2                   BF          L441
    000001BC              L440:                             
           net.c    89                    }
           net.c    90            }
           net.c    91            
           net.c    92            return checksum;
           net.c    93    }
    000001BC 4F26                   LDS.L       @R15+,PR
    000001BE 6063                   MOV         R6,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001C0 000B                   RTS
    000001C2 6EF6                   MOV.L       @R15+,R14
           net.c    94    
           net.c    95    Data* receiveData(int retryCount) {
    000001C4              _receiveData:                    ; function: receiveData
                                                           ; frame size=4
    000001C4 7FFC                   ADD         #-4,R15
           net.c    96            return receiveDataTimeout(500, retryCount);
    000001C6 6543                   MOV         R4,R5
    000001C8 2F42                   MOV.L       R4,@R15
    000001CA 9418                   MOV.W       L480+2,R4  ; H'01F4
    000001CC A000                   BRA         _receiveDataTimeout
    000001CE 7F04                   ADD         #4,R15
           net.c    97    }
           net.c    98    
           net.c    99    Data* receiveDataTimeout(int timeout, int retryCount) {
    000001D0              _receiveDataTimeout:             ; function: receiveDataTimeout
                                                           ; frame size=60
    000001D0 2FE6                   MOV.L       R14,@-R15
    000001D2 2FD6                   MOV.L       R13,@-R15
    000001D4 2FC6                   MOV.L       R12,@-R15
    000001D6 2FB6                   MOV.L       R11,@-R15
    000001D8 2FA6                   MOV.L       R10,@-R15
    000001DA 6B43                   MOV         R4,R11
           net.c   100            int startTicks = RTC_GetTicks();
    000001DC D30B                   MOV.L       L480+16,R3 ; _RTC_GetTicks
    000001DE 2F96                   MOV.L       R9,@-R15
    000001E0 2F86                   MOV.L       R8,@-R15
    000001E2 4F22                   STS.L       PR,@-R15
    000001E4 7FE4                   ADD         #-28,R15
    000001E6 430B                   JSR         @R3
    000001E8 1F52                   MOV.L       R5,@(8,R15)
           net.c   101            Data* data = NULL;
    000001EA EA00                   MOV         #0,R10
    000001EC 1F03                   MOV.L       R0,@(12,R15)
    000001EE 6EA3                   MOV         R10,R14
           net.c   102            unsigned char buf[11];
           net.c   103            int retry = 0;
           net.c   104            
           net.c   105            if (retryCount < 0) {
    000001F0 53F2                   MOV.L       @(8,R15),R3
    000001F2 4311                   CMP/PZ      R3
    000001F4 8D61                   BT/S        L447
    000001F6 68A3                   MOV         R10,R8
           net.c   106                    return NULL;
    000001F8 A08A                   BRA         L446
    000001FA E000                   MOV         #0,R0
    000001FC              L480:                             
    000001FC 2710                   .DATA.W     H'2710
    000001FE 01F4                   .DATA.W     H'01F4
    00000200 <00000000>             .DATA.L     _Serial_ReadOneByte
    00000204 <00000000>             .DATA.L     _RTC_Elapsed_ms
    00000208 <00000000>             .DATA.L     __modlu
    0000020C <00000000>             .DATA.L     _RTC_GetTicks
    00000210              L448:                             
           net.c   107            }
           net.c   108            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   109            while (!RTC_Elapsed_ms(startTicks, timeout)) {
           net.c   110                    unsigned char c;
           net.c   111                    
           net.c   112                    if (Serial_ReadOneByte(&c) == 0 && c == 221) {
    00000210 DD34                   MOV.L       L481+2,R13 ; _Serial_ReadOneByte
    00000212 64F3                   MOV         R15,R4
    00000214 4D0B                   JSR         @R13
    00000216 7404                   ADD         #4,R4
    00000218 2008                   TST         R0,R0
    0000021A 8B4E                   BF          L447
    0000021C 84F4                   MOV.B       @(4,R15),R0
    0000021E 600C                   EXTU.B      R0,R0
    00000220 935F                   MOV.W       L481,R3    ; H'00DD
    00000222 3030                   CMP/EQ      R3,R0
    00000224 8B49                   BF          L447
           net.c   113                            receiveStringTimeout(buf, 11, timeout);
    00000226 6DF3                   MOV         R15,R13
    00000228 7D10                   ADD         #16,R13
    0000022A 66B3                   MOV         R11,R6
    0000022C E50B                   MOV         #11,R5
    0000022E BF21                   BSR         _receiveStringTimeout
    00000230 64D3                   MOV         R13,R4
           net.c   114                            if (strcmp(buf, "DATA", 4) == 0) {
    00000232 E604                   MOV         #4,R6
    00000234 D22D                   MOV.L       L481+10,R2 ; _strcmp
    00000236 DC2C                   MOV.L       L481+6,R12 ; L358
    00000238 65C3                   MOV         R12,R5
    0000023A 420B                   JSR         @R2
    0000023C 64D3                   MOV         R13,R4
    0000023E 2008                   TST         R0,R0
    00000240 8B3B                   BF          L447
           net.c   115                                    int counter = 0;
    00000242 6CA3                   MOV         R10,R12
           net.c   116                                    short received;
           net.c   117                                    data = (Data*) malloc(sizeof(Data));
    00000244 D22A                   MOV.L       L481+14,R2 ; _malloc
    00000246 420B                   JSR         @R2
    00000248 E40C                   MOV         #12,R4
    0000024A 6E03                   MOV         R0,R14
           net.c   118                                    
           net.c   119                                    if (!receiveStringTimeout(buf, 11, timeout)) {
    0000024C 66B3                   MOV         R11,R6
    0000024E E50B                   MOV         #11,R5
    00000250 BF10                   BSR         _receiveStringTimeout
    00000252 64D3                   MOV         R13,R4
    00000254 2008                   TST         R0,R0
    00000256 8909                   BT          L411
           net.c   120                                            retry = 1;
           net.c   121                                            break;
           net.c   122                                    }
           net.c   123                                    data->length = atoi(buf);
    00000258 D326                   MOV.L       L481+18,R3 ; _atoi
    0000025A 430B                   JSR         @R3
    0000025C 64D3                   MOV         R13,R4
           net.c   124                                    
           net.c   125                                    if (!receiveStringTimeout(buf, 11, timeout)) {
    0000025E 66B3                   MOV         R11,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000260 2E02                   MOV.L       R0,@R14
    00000262 E50B                   MOV         #11,R5
    00000264 BF06                   BSR         _receiveStringTimeout
    00000266 64D3                   MOV         R13,R4
    00000268 2008                   TST         R0,R0
    0000026A 8B01                   BF          L453
    0000026C              L411:
           net.c   126                                            retry = 1;
           net.c   127                                            break;
    0000026C A02B                   BRA         L452
    0000026E E801                   MOV         #1,R8
    00000270              L453:                             
           net.c   128                                    }
           net.c   129                                    data->checksum = (unsigned int) atol(buf);
    00000270 D321                   MOV.L       L481+22,R3 ; _atol
    00000272 430B                   JSR         @R3
    00000274 64D3                   MOV         R13,R4
    00000276 1E01                   MOV.L       R0,@(4,R14)
           net.c   130                                    
           net.c   131                                    data->buf = (unsigned char*) malloc(data->length);
    00000278 D21D                   MOV.L       L481+14,R2 ; _malloc
    0000027A 420B                   JSR         @R2
    0000027C 64E2                   MOV.L       @R14,R4
    0000027E 1E02                   MOV.L       R0,@(8,R14)
           net.c   132                                    while (1) {
    00000280              L455:                             
           net.c   133                                            Serial_ReadNBytes(&data->buf[counter], data->length - counter, &re
                         +ceived);
    00000280 DD1E                   MOV.L       L481+26,R13; _Serial_ReadNBytes
    00000282 66F3                   MOV         R15,R6
    00000284 65E2                   MOV.L       @R14,R5
    00000286 35C8                   SUB         R12,R5
    00000288 54E2                   MOV.L       @(8,R14),R4
    0000028A 4D0B                   JSR         @R13
    0000028C 34CC                   ADD         R12,R4
           net.c   134                                            counter += received;
    0000028E 62F1                   MOV.W       @R15,R2
           net.c   135                                            
           net.c   136                                            if (counter >= data->length) {
    00000290 63E2                   MOV.L       @R14,R3
    00000292 3C2C                   ADD         R2,R12
    00000294 3C32                   CMP/HS      R3,R12
    00000296 8B07                   BF          L456
           net.c   137                                                    if (data->checksum != calculateChecksum(data->buf, data->l
                         +ength)) {
    00000298 65E2                   MOV.L       @R14,R5
    0000029A BF79                   BSR         _calculateChecksum
    0000029C 54E2                   MOV.L       @(8,R14),R4
    0000029E 52E1                   MOV.L       @(4,R14),R2
    000002A0 3200                   CMP/EQ      R0,R2
    000002A2 8910                   BT          L452
           net.c   138                                                            retry = 1;
           net.c   139                                                    }
           net.c   140                                                    
           net.c   141                                                    break;
    000002A4 A00F                   BRA         L452
    000002A6 E801                   MOV         #1,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A8              L456:                             
           net.c   142                                            }
           net.c   143    
           net.c   144                                            if (RTC_Elapsed_ms(startTicks, timeout)) {
    000002A8 65B3                   MOV         R11,R5
    000002AA 490B                   JSR         @R9
    000002AC 54F3                   MOV.L       @(12,R15),R4
    000002AE 2008                   TST         R0,R0
    000002B0 89E6                   BT          L455
           net.c   145                                                    freeData(data);
    000002B2 B037                   BSR         _freeData
    000002B4 64E3                   MOV         R14,R4
           net.c   146                                                    data = NULL;
           net.c   147                                                    break;
    000002B6 A006                   BRA         L452
    000002B8 6EA3                   MOV         R10,R14
    000002BA              L447:                             
    000002BA 65B3                   MOV         R11,R5
    000002BC D910                   MOV.L       L481+30,R9 ; _RTC_Elapsed_ms
    000002BE 490B                   JSR         @R9
    000002C0 54F3                   MOV.L       @(12,R15),R4
    000002C2 2008                   TST         R0,R0
    000002C4 89A4                   BT          L448
    000002C6              L452:                             
           net.c   148                                            }
           net.c   149                                    }
           net.c   150    
           net.c   151                                    break;
           net.c   152                            }
           net.c   153                    }
           net.c   154            }
           net.c   155            
           net.c   156            if (retry == 1) {
    000002C6 6083                   MOV         R8,R0
    000002C8 8801                   CMP/EQ      #1,R0
    000002CA 8B1D                   BF          L460
           net.c   157                    freeData(data);
    000002CC B02A                   BSR         _freeData
    000002CE 64E3                   MOV         R14,R4
           net.c   158                    data = NULL;
           net.c   159                    sendStatus("DE");
    000002D0 D40C                   MOV.L       L481+34,R4 ; L372
    000002D2 BEBC                   BSR         _sendStatus
    000002D4 0009                   NOP
           net.c   160                    data = receiveDataTimeout(timeout, retryCount - 1);
    000002D6 55F2                   MOV.L       @(8,R15),R5
    000002D8 75FF                   ADD         #-1,R5
    000002DA BF79                   BSR         _receiveDataTimeout
    000002DC 64B3                   MOV         R11,R4
    000002DE A016                   BRA         L461
    000002E0 6E03                   MOV         R0,R14
    000002E2              L481:                             
    000002E2 00DD                   .DATA.W     H'00DD
    000002E4 <00000000>             .DATA.L     _Serial_ReadOneByte
    000002E8 <00000000>             .DATA.L     L358
    000002EC <00000000>             .DATA.L     _strcmp
    000002F0 <00000000>             .DATA.L     _malloc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F4 <00000000>             .DATA.L     _atoi
    000002F8 <00000000>             .DATA.L     _atol
    000002FC <00000000>             .DATA.L     _Serial_ReadNBytes
    00000300 <00000000>             .DATA.L     _RTC_Elapsed_ms
    00000304 <00000000>             .DATA.L     L372
    00000308              L460:                             
           net.c   161            } else {
           net.c   162                    sendStatus("OK");
    00000308 D440                   MOV.L       L482+2,R4  ; L374
    0000030A BEA0                   BSR         _sendStatus
    0000030C 0009                   NOP
    0000030E              L461:                             
           net.c   163            }
           net.c   164            
           net.c   165            return data;
    0000030E 60E3                   MOV         R14,R0
           net.c   166    }
    00000310              L446:                             
    00000310 7F1C                   ADD         #28,R15
    00000312 4F26                   LDS.L       @R15+,PR
    00000314 68F6                   MOV.L       @R15+,R8
    00000316 69F6                   MOV.L       @R15+,R9
    00000318 6AF6                   MOV.L       @R15+,R10
    0000031A 6BF6                   MOV.L       @R15+,R11
    0000031C 6CF6                   MOV.L       @R15+,R12
    0000031E 6DF6                   MOV.L       @R15+,R13
    00000320 000B                   RTS
    00000322 6EF6                   MOV.L       @R15+,R14
           net.c   167    
           net.c   168    void freeData(Data* data) {
    00000324              _freeData:                       ; function: freeData
                                                           ; frame size=8
    00000324 2FE6                   MOV.L       R14,@-R15
    00000326 6E43                   MOV         R4,R14
    00000328 4F22                   STS.L       PR,@-R15
           net.c   169            if (data != NULL) {
    0000032A 2EE8                   TST         R14,R14
    0000032C 890C                   BT          L462
           net.c   170                    if (data->buf != NULL) {
    0000032E 52E2                   MOV.L       @(8,R14),R2
    00000330 2228                   TST         R2,R2
    00000332 8904                   BT          L463
           net.c   171                            free(data->buf);
    00000334 D336                   MOV.L       L482+6,R3  ; _free
    00000336 430B                   JSR         @R3
    00000338 54E2                   MOV.L       @(8,R14),R4
           net.c   172                            data->buf = NULL;
    0000033A E200                   MOV         #0,R2
    0000033C 1E22                   MOV.L       R2,@(8,R14)
    0000033E              L463:                             
           net.c   173                    }
           net.c   174                    
           net.c   175                    free(data);
    0000033E 64E3                   MOV         R14,R4
    00000340 4F26                   LDS.L       @R15+,PR
    00000342 D333                   MOV.L       L482+6,R3  ; _free
    00000344 432B                   JMP         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000346 6EF6                   MOV.L       @R15+,R14
    00000348              L462:                             
           net.c   176            }
           net.c   177    }
    00000348 4F26                   LDS.L       @R15+,PR
    0000034A 000B                   RTS
    0000034C 6EF6                   MOV.L       @R15+,R14
           net.c   178    
           net.c   179    NetworkList* getAvailableNetworks() {
    0000034E              _getAvailableNetworks:           ; function: getAvailableNetworks
                                                           ; frame size=40
    0000034E 2FE6                   MOV.L       R14,@-R15
    00000350 2FD6                   MOV.L       R13,@-R15
    00000352 2FC6                   MOV.L       R12,@-R15
    00000354 2FB6                   MOV.L       R11,@-R15
           net.c   180            int status;
           net.c   181            Data* data = NULL;
           net.c   182            int counter;
           net.c   183            NetworkList *head = NULL, *tail = NULL;
    00000356 EC00                   MOV         #0,R12
           net.c   184            
           net.c   185            sendCommand((unsigned char*) "GETNETS");
    00000358 D42E                   MOV.L       L482+10,R4 ; L386
    0000035A 2FA6                   MOV.L       R10,@-R15
    0000035C 2F96                   MOV.L       R9,@-R15
    0000035E 69C3                   MOV         R12,R9
    00000360 2F86                   MOV.L       R8,@-R15
    00000362 4F22                   STS.L       PR,@-R15
    00000364 7FF8                   ADD         #-8,R15
    00000366 BE62                   BSR         _sendCommand
    00000368 68C3                   MOV         R12,R8
           net.c   186            status = receiveStatus();
    0000036A BEBF                   BSR         _receiveStatus
    0000036C 0009                   NOP
    0000036E 6403                   MOV         R0,R4
           net.c   187            
           net.c   188            if (status != STATUS_OK) {
    00000370 2448                   TST         R4,R4
    00000372 8B05                   BF          L413
           net.c   189                    return NULL;
           net.c   190            }
           net.c   191            
           net.c   192            data = receiveDataTimeout(20000, 5);
    00000374 9449                   MOV.W       L482,R4    ; H'4E20
    00000376 BF2B                   BSR         _receiveDataTimeout
    00000378 E505                   MOV         #5,R5
    0000037A 6D03                   MOV         R0,R13
           net.c   193            if (data == NULL) {
    0000037C 2DD8                   TST         R13,R13
    0000037E 8B01                   BF          L466
    00000380              L413:
           net.c   194                    return NULL;
    00000380 A06A                   BRA         L465
    00000382 E000                   MOV         #0,R0
    00000384              L466:                             
           net.c   195            }
           net.c   196            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           net.c   197            counter = 0;
           net.c   198            while (counter < data->length) {
    00000384 A062                   BRA         L467
    00000386 6EC3                   MOV         R12,R14
    00000388              L468:                             
           net.c   199                    NetworkList* netElement;
           net.c   200                    int ssidLength;
           net.c   201                    
           net.c   202                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    00000388 DB23                   MOV.L       L482+14,R11; _memchr
    0000038A E500                   MOV         #0,R5
    0000038C 54D2                   MOV.L       @(8,R13),R4
    0000038E 66D2                   MOV.L       @R13,R6
    00000390 36E8                   SUB         R14,R6
    00000392 4B0B                   JSR         @R11
    00000394 34EC                   ADD         R14,R4
    00000396 2008                   TST         R0,R0
    00000398 895B                   BT          L470
           net.c   203                            break;
           net.c   204                    }
           net.c   205                    
           net.c   206                    netElement = (NetworkList*) malloc(sizeof(NetworkList));
    0000039A D220                   MOV.L       L482+18,R2 ; _malloc
    0000039C 420B                   JSR         @R2
    0000039E E410                   MOV         #16,R4
           net.c   207                    ssidLength = strlen(&data->buf[counter]);
    000003A0 DA1F                   MOV.L       L482+22,R10; _strlen
    000003A2 6C03                   MOV         R0,R12
    000003A4 54D2                   MOV.L       @(8,R13),R4
    000003A6 4A0B                   JSR         @R10
    000003A8 34EC                   ADD         R14,R4
           net.c   208                    
           net.c   209                    netElement->network.ssid = (unsigned char*) malloc(ssidLength + 1);
    000003AA 6403                   MOV         R0,R4
    000003AC D31B                   MOV.L       L482+18,R3 ; _malloc
    000003AE 7401                   ADD         #1,R4
    000003B0 2F02                   MOV.L       R0,@R15
    000003B2 430B                   JSR         @R3
    000003B4 1F41                   MOV.L       R4,@(4,R15)
    000003B6 2C02                   MOV.L       R0,@R12
           net.c   210                    strncpy(netElement->network.ssid, &data->buf[counter], ssidLength);
    000003B8 66F2                   MOV.L       @R15,R6
    000003BA 55D2                   MOV.L       @(8,R13),R5
    000003BC D319                   MOV.L       L482+26,R3 ; _strncpy
    000003BE 35EC                   ADD         R14,R5
    000003C0 430B                   JSR         @R3
    000003C2 64C2                   MOV.L       @R12,R4
           net.c   211                    counter += ssidLength + 1;
    000003C4 52F1                   MOV.L       @(4,R15),R2
           net.c   212                    
           net.c   213                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    000003C6 E500                   MOV         #0,R5
    000003C8 54D2                   MOV.L       @(8,R13),R4
    000003CA 3E2C                   ADD         R2,R14
    000003CC 66D2                   MOV.L       @R13,R6
    000003CE 36E8                   SUB         R14,R6
    000003D0 4B0B                   JSR         @R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003D2 34EC                   ADD         R14,R4
    000003D4 2008                   TST         R0,R0
    000003D6 8911                   BT          L414
           net.c   214                            free(netElement->network.ssid);
           net.c   215                            free(netElement);
           net.c   216                            break;
           net.c   217                    }
           net.c   218                    
           net.c   219                    netElement->network.rssi = atoi(&data->buf[counter]);
    000003D8 54D2                   MOV.L       @(8,R13),R4
    000003DA D213                   MOV.L       L482+30,R2 ; _atoi
    000003DC 420B                   JSR         @R2
    000003DE 34EC                   ADD         R14,R4
    000003E0 1C01                   MOV.L       R0,@(4,R12)
           net.c   220                    counter += strlen(&data->buf[counter]) + 1;
    000003E2 54D2                   MOV.L       @(8,R13),R4
    000003E4 4A0B                   JSR         @R10
    000003E6 34EC                   ADD         R14,R4
           net.c   221                    
           net.c   222                    if (memchr(&data->buf[counter], 0, data->length - counter) == NULL) {
    000003E8 66D2                   MOV.L       @R13,R6
    000003EA E500                   MOV         #0,R5
    000003EC 54D2                   MOV.L       @(8,R13),R4
    000003EE 7001                   ADD         #1,R0
    000003F0 3E0C                   ADD         R0,R14
    000003F2 36E8                   SUB         R14,R6
    000003F4 4B0B                   JSR         @R11
    000003F6 34EC                   ADD         R14,R4
    000003F8 2008                   TST         R0,R0
    000003FA 8B17                   BF          L472
    000003FC              L414:
           net.c   223                            free(netElement->network.ssid);
    000003FC DE04                   MOV.L       L482+6,R14 ; _free
    000003FE 4E0B                   JSR         @R14
    00000400 64C2                   MOV.L       @R12,R4
           net.c   224                            free(netElement);
    00000402 4E0B                   JSR         @R14
    00000404 64C3                   MOV         R12,R4
           net.c   225                            break;
    00000406 A024                   BRA         L470
    00000408 0009                   NOP
    0000040A              L482:                             
    0000040A 4E20                   .DATA.W     H'4E20
    0000040C <00000000>             .DATA.L     L374
    00000410 <00000000>             .DATA.L     _free
    00000414 <00000000>             .DATA.L     L386
    00000418 <00000000>             .DATA.L     _memchr
    0000041C <00000000>             .DATA.L     _malloc
    00000420 <00000000>             .DATA.L     _strlen
    00000424 <00000000>             .DATA.L     _strncpy
    00000428 <00000000>             .DATA.L     _atoi
    0000042C              L472:                             
           net.c   226                    }
           net.c   227                    
           net.c   228                    netElement->network.encType = atoi(&data->buf[counter]);
    0000042C 54D2                   MOV.L       @(8,R13),R4
    0000042E D32A                   MOV.L       L483,R3    ; _atoi




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000430 430B                   JSR         @R3
    00000432 34EC                   ADD         R14,R4
    00000434 1C02                   MOV.L       R0,@(8,R12)
           net.c   229                    counter += strlen(&data->buf[counter]) + 1;
    00000436 54D2                   MOV.L       @(8,R13),R4
    00000438 4A0B                   JSR         @R10
    0000043A 34EC                   ADD         R14,R4
    0000043C 7001                   ADD         #1,R0
           net.c   230                    
           net.c   231                    if (head == NULL) {
    0000043E 2998                   TST         R9,R9
    00000440 8F02                   BF/S        L473
    00000442 3E0C                   ADD         R0,R14
    00000444 A001                   BRA         L412
           net.c   232                            head = netElement;
    00000446 69C3                   MOV         R12,R9
    00000448              L473:                             
           net.c   233                            tail = netElement;
           net.c   234                    } else {
           net.c   235                            tail->next = netElement;
    00000448 18C3                   MOV.L       R12,@(12,R8)
    0000044A              L412:
           net.c   236                            tail = netElement;
    0000044A 68C3                   MOV         R12,R8
    0000044C              L467:                             
    0000044C 63D2                   MOV.L       @R13,R3
    0000044E 3E32                   CMP/HS      R3,R14
    00000450 8B9A                   BF          L468
    00000452              L470:                             
           net.c   237                    }
           net.c   238            }
           net.c   239            
           net.c   240            freeData(data);
    00000452 BF67                   BSR         _freeData
    00000454 64D3                   MOV         R13,R4
           net.c   241            
           net.c   242            return head;
    00000456 6093                   MOV         R9,R0
           net.c   243    }
    00000458              L465:                             
    00000458 7F08                   ADD         #8,R15
    0000045A 4F26                   LDS.L       @R15+,PR
    0000045C 68F6                   MOV.L       @R15+,R8
    0000045E 69F6                   MOV.L       @R15+,R9
    00000460 6AF6                   MOV.L       @R15+,R10
    00000462 6BF6                   MOV.L       @R15+,R11
    00000464 6CF6                   MOV.L       @R15+,R12
    00000466 6DF6                   MOV.L       @R15+,R13
    00000468 000B                   RTS
    0000046A 6EF6                   MOV.L       @R15+,R14
           net.c   244    
           net.c   245    int connect(int index, unsigned char* pass) {
    0000046C              _connect:                        ; function: connect
                                                           ; frame size=68
    0000046C 2FE6                   MOV.L       R14,@-R15
    0000046E 4F22                   STS.L       PR,@-R15
    00000470 7FCC                   ADD         #-52,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000472 1F41                   MOV.L       R4,@(4,R15)
           net.c   246            unsigned char* buf[11];
           net.c   247            int status;
           net.c   248            
           net.c   249            sendCommand((unsigned char*) "CONNECT");
    00000474 D419                   MOV.L       L483+4,R4  ; L404
    00000476 BDDA                   BSR         _sendCommand
    00000478 2F52                   MOV.L       R5,@R15
           net.c   250            sprintf(buf, "%d", index);
    0000047A 6EF3                   MOV         R15,R14
    0000047C 52F1                   MOV.L       @(4,R15),R2
    0000047E 7E08                   ADD         #8,R14
    00000480 D317                   MOV.L       L483+8,R3  ; L405
    00000482 2F26                   MOV.L       R2,@-R15
    00000484 2F36                   MOV.L       R3,@-R15
    00000486 D217                   MOV.L       L483+12,R2 ; _sprintf
    00000488 420B                   JSR         @R2
    0000048A 64E3                   MOV         R14,R4
           net.c   251            Serial_BufferedTransmitNBytes(buf, strlen(buf) + 1);
    0000048C D316                   MOV.L       L483+16,R3 ; _strlen
    0000048E 7F08                   ADD         #8,R15
    00000490 430B                   JSR         @R3
    00000492 64E3                   MOV         R14,R4
    00000494 D215                   MOV.L       L483+20,R2 ; _Serial_BufferedTransmitNBytes
    00000496 6503                   MOV         R0,R5
    00000498 7501                   ADD         #1,R5
    0000049A 420B                   JSR         @R2
    0000049C 64E3                   MOV         R14,R4
           net.c   252            Serial_BufferedTransmitNBytes(pass, strlen(pass) + 1);
    0000049E D312                   MOV.L       L483+16,R3 ; _strlen
    000004A0 430B                   JSR         @R3
    000004A2 64F2                   MOV.L       @R15,R4
    000004A4 D311                   MOV.L       L483+20,R3 ; _Serial_BufferedTransmitNBytes
    000004A6 6503                   MOV         R0,R5
    000004A8 7501                   ADD         #1,R5
    000004AA 430B                   JSR         @R3
    000004AC 64F2                   MOV.L       @R15,R4
           net.c   253            
           net.c   254            status = receiveStatus();
    000004AE BE1D                   BSR         _receiveStatus
    000004B0 0009                   NOP
    000004B2 6403                   MOV         R0,R4
           net.c   255            
           net.c   256            if (status == STATUS_OK) {
    000004B4 2448                   TST         R4,R4
    000004B6 0029                   MOVT        R0
           net.c   257                    return 1;
           net.c   258            }
           net.c   259            
           net.c   260            return 0;
           net.c   261    }
    000004B8 7F34                   ADD         #52,R15
    000004BA 4F26                   LDS.L       @R15+,PR
    000004BC 000B                   RTS
    000004BE 6EF6                   MOV.L       @R15+,R14
           net.c   262    
           net.c   263    int disconnect() {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C0              _disconnect:                     ; function: disconnect
                                                           ; frame size=4
    000004C0 4F22                   STS.L       PR,@-R15
           net.c   264            int status;
           net.c   265            
           net.c   266            sendCommand((unsigned char*) "DISCONNECT");
    000004C2 D40B                   MOV.L       L483+24,R4 ; L409
    000004C4 BDB3                   BSR         _sendCommand
    000004C6 0009                   NOP
           net.c   267            status = receiveStatus();
    000004C8 BE10                   BSR         _receiveStatus
    000004CA 0009                   NOP
           net.c   268            
           net.c   269            if (status == STATUS_OK) {
           net.c   270                    return 1;
           net.c   271            }
           net.c   272            
           net.c   273            return 0;
           net.c   274    }
    000004CC 4F26                   LDS.L       @R15+,PR
    000004CE 6403                   MOV         R0,R4
    000004D0 2448                   TST         R4,R4
    000004D2 0029                   MOVT        R0
    000004D4 000B                   RTS
    000004D6 0009                   NOP
    000004D8              L483:                             
    000004D8 <00000000>             .DATA.L     _atoi
    000004DC <00000000>             .DATA.L     L404
    000004E0 <00000000>             .DATA.L     L405
    000004E4 <00000000>             .DATA.L     _sprintf
    000004E8 <00000000>             .DATA.L     _strlen
    000004EC <00000000>             .DATA.L     _Serial_BufferedTransmitNBytes
    000004F0 <00000000>             .DATA.L     L409
C   00000000              L358:
    00000000 44415441               .SDATA      "DATA"
    00000004 00                     .DATA.B     H'00
    00000005 00000001               .RES.B      1
    00000006 00000002               .RES.W      1
    00000008              L372:
    00000008 4445                   .SDATA      "DE"
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L374:
    0000000C 4F4B                   .SDATA      "OK"
    0000000E 00                     .DATA.B     H'00
    0000000F 00000001               .RES.B      1
    00000010              L386:
    00000010 4745544E45             .SDATA      "GETNETS"
             5453         
    00000017 00                     .DATA.B     H'00
    00000018              L404:
    00000018 434F4E4E45             .SDATA      "CONNECT"
             4354         
    0000001F 00                     .DATA.B     H'00
    00000020              L405:
    00000020 2564                   .SDATA      "%d"
    00000022 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000023 00000001               .RES.B      1
    00000024              L409:
    00000024 444953434F             .SDATA      "DISCONNECT"
             4E4E454354   
    0000002E 00                     .DATA.B     H'00
























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 16-Aug-2018 17:16:43  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         7




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      274



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000004F4 Byte(s)
CONSTANT SECTION (C):                               0000002F Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000523 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           20
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          15
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            80






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Niko\AppData\Local\Temp\hmkBC66.tmp 

